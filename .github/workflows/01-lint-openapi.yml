name: Lint OpenApi Schema

on:
  push:
    branches:
      - trunk
    paths:
      - src/Core/Framework/Api/ApiDefinition/Generator/Schema/**/*
  pull_request:
    paths:
      - src/Core/Framework/Api/ApiDefinition/Generator/Schema/**/*

jobs:
  openapi-lint:
    runs-on: ubuntu-latest
    services:
      database:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: root
        options: '--mount="type=tmpfs,destination=/var/lib/mysql" --health-cmd="mysqladmin ping -h 127.0.0.1" --health-interval=5s --health-timeout=2s --health-retries=3'
        ports:
          - "3306:3306"
    env:
      APP_ENV: "dev"
      APP_URL: http://localhost:8000
      APP_SECRET: def00000bb5acb32b54ff8ee130270586eec0e878f7337dc7a837acc31d3ff00f93a56b595448b4b29664847dd51991b3314ff65aeeeb761a133b0ec0e070433bff08e48
      DATABASE_URL: mysql://root:root@127.0.0.1:3306/root
      DATABASE_HOST: database
      COMPOSER_ROOT_VERSION: 6.6.9999999.9999999-dev
    steps:
      - name: Clone platform
        uses: actions/checkout@v4

      - name: Get Composer Cache Directory
        id: composer-cache
        run: |
          echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer Archives
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: gd, bcmath
          tools: symfony-cli

      - name: Remove vendor-bin
        run: rm -R vendor-bin

      - name: Setup Composer
        run: composer install -o

      - name: Install Shopware
        run: composer run init:db

      - name: Start Webserver
        run: symfony server:start -d

      - name: Prepare schema lint
        run: |
          npm i -g @redocly/cli@latest @shopware/api-gen@canary
          export STOREFRONT_ID=$(bin/console sales-channel:list --output json | jq -r '.[] | select(.name == "Storefront") | .id')
          export OPENAPI_ACCESS_KEY=$(mysql -u root -h 127.0.0.1 -proot root -se "SELECT access_key FROM sales_channel WHERE id = 0x${STOREFRONT_ID}";)
          printf "OPENAPI_JSON_URL=http://localhost:8000\nSHOPWARE_ADMIN_USERNAME=admin\nSHOPWARE_ADMIN_PASSWORD=shopware\nOPENAPI_ACCESS_KEY=${OPENAPI_ACCESS_KEY}" > .env

      - name: Generate & Lint OpenApi StoreAPI schema
        run: |
          api-gen loadSchema --apiType=store --filename=storeApiSchema.json
          redocly lint --skip-rule operation-4xx-response --skip-rule no-server-example.com --skip-rule no-unused-components ./storeApiSchema.json

      - name: Generate & Lint OpenApi API schema
        run: |
          api-gen loadSchema --apiType=admin --filename=adminApiSchema.json
          redocly lint --skip-rule operation-4xx-response --skip-rule no-server-example.com --skip-rule no-unused-components ./adminApiSchema.json
