name: Prepare release

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.repository == 'shopware/shopware'
    env:
      SHOPWARE_ADMIN_SKIP_SOURCEMAP_GENERATION: "1"
      DATABASE_URL: mysql://root:root@127.0.0.1:3306/root
    services:
      database:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: root
        options: '--mount="type=tmpfs,destination=/var/lib/mysql" --health-cmd="mysqladmin ping -h 127.0.0.1" --health-interval=5s --health-timeout=2s --health-retries=3'
        ports:
          - "3306:3306"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          fetch-tags: "true"
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.2
          coverage: none
          extensions: gd, xml, dom, curl, pdo, mysqli, mbstring, pdo_mysql, bcmath
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: build shopware
        run: |
          composer setup
      - uses: actions/upload-artifact@v4
        with:
          name: context
          path: |
            .
            !public
            !**/node_modules
            !vendor
            !vendor-bin

  split:
    needs: build
    runs-on: ubuntu-latest
    if: github.repository == 'shopware/shopware'
    strategy:
      matrix:
        package:
          - name: Administration
            remote: https://${{ secrets.MANYREPO_SYNC_USER }}:${{ secrets.MANYREPO_SYNC_TOKEN }}@github.com/shopware/administration
          - name: Storefront
            remote: https://${{ secrets.MANYREPO_SYNC_USER }}:${{ secrets.MANYREPO_SYNC_TOKEN }}@github.com/shopware/storefront
          - name: Core
            remote: https://${{ secrets.MANYREPO_SYNC_USER }}:${{ secrets.MANYREPO_SYNC_TOKEN }}@github.com/shopware/core
          - name: Elasticsearch
            remote: https://${{ secrets.MANYREPO_SYNC_USER }}:${{ secrets.MANYREPO_SYNC_TOKEN }}@github.com/shopware/elasticsearch
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: context
      - name: split
        run: |
          bash .github/split.bash split_repo "${{ matrix.package.name }}"
      - name: Incldue assets
        run: |
          bash .github/split.bash include_assets "${{ matrix.package.name }}"
      - name: Require core version
        run: |
          bash .github/split.bash require_core_version "${{ matrix.package.name }}" "${{ github.ref_name }}" ${{ github.ref_type }}
      - name: Require core version
        ## todo use tag
        if: matrix.package.name != 'Core'
        env:
          GIT_AUTHOR_EMAIL: "shopwarebot@shopware.com"
          GIT_AUTHOR_NAME: "shopwareBot"
          GIT_COMMITTER_EMAIL: "shopwarebot@shopware.com"
          GIT_COMMITTER_NAME: "shopwareBot"
        run: |
          bash .github/split.bash commit "${package}" "${{ github.ref_name }} (+ assets)"
      - name: Diff
        if: matrix.package.name != 'Core'
        run: |
          P=${{ matrix.package.name }}
          cat repos/${P,,}/composer.json
          git -C repos/${P,,} log -n 1
          git -C repos/${P,,} diff @^..
      - name: Push
        if: github.ref_type == 'tag' && github.ref_protected
        run: |
          bash .github/split.bash push "${{ matrix.package.name }}" ${{ matrix.package.remote }} "${{ github.ref_name }}"

  draft-release-notes:
    runs-on: ubuntu-latest
    if: github.repository == 'shopware/shopware'
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Draft release (Dry run)
        if: github.ref_type != 'tag'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRY_RUN: 1
        run: |
          bash .github/bin/create_github_release.bash draft "${{ github.ref_name }}"
      - name: Draft release
        if: github.ref_type == 'tag' && github.ref_protected
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          bash .github/bin/create_github_release.bash draft "${{ github.ref_name }}"

  create-sbp-release:
    runs-on: ubuntu-latest
    if: github.repository == 'shopware/shopware'
    strategy:
      matrix:
        sbp-environment: [STAGING, PRODUCTION]
    env:
      SBP_API_URL: ${{ secrets[format('SBP_API_URL_{0}', matrix.sbp-environment)] }}
      SBP_TOKEN: ${{ secrets[format('SBP_API_TOKEN_{0}', matrix.sbp-environment)] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Create sbp release (Dry run)
        if: github.ref_type != 'tag'
        env:
          DRY_RUN: "1"
        run: |
          bash .github/bin/sbp_release.bash create "${{ github.ref_name }}"
      - name: Create sbp release
        if: github.ref_type == 'tag' && github.ref_protected
        run: |
          bash .github/bin/sbp_release.bash create "${{ github.ref_name }}"
