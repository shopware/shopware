variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: "tcp://docker:2375"
    DOCKER_TLS_CERTDIR: "/certs"
    MYSQL_ROOT_PASSWORD: app
    WEB_DOCUMENT_ROOT: $CI_PROJECT_DIR/development/public
    GIT_STRATEGY: clone
    LOG_STDOUT: $CI_PROJECT_DIR/stdout.log
    PERCY_BRANCH: $CI_DEV_BRANCH
    PERCY_TARGET_BRANCH: $CI_TARGET_BRANCH_NAME
    MYSQL_CMD: mysqld

stages:
    - unit
    - E2E
    - Build
    - Generate docs
    - Security
    - Deploy

include:
    -   local: .gitlab/ci/split.yml

default:
    image: shopware/development:latest
    before_script:
        - apt-install jq
        - export CI_DEV_BRANCH=$(echo $CI_COMMIT_REF_NAME | cut -d'+' -f2-)
        - if [[ -d "development/" ]]; then zip -rq cache.zip development/; rm -rf development; fi
        - zip -rq platform.zip .
        - git clone http://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/development.git
        - unzip -q platform.zip -d development/platform/
        - cd development
        - git -C platform checkout master
        - git -C platform checkout $CI_COMMIT_SHA
        - >
            if [ "$(git ls-remote origin $CI_DEV_BRANCH | wc -l)" == 1 ]; then
              echo "Development Branch: $CI_DEV_BRANCH (explicit)";
              git checkout $CI_DEV_BRANCH;
            elif [ "$(git ls-remote origin $CI_COMMIT_REF_NAME | wc -l)" == 1 ]; then
              echo "Development Branch: $CI_COMMIT_REF_NAME (implicit by same branch name)";
              git checkout $CI_COMMIT_REF_NAME;
            else
              export CI_TARGET_BRANCH_NAME=$(curl -LsS -H "PRIVATE-TOKEN: $CI_GITLAB_API_TOKEN" "https://gitlab.shopware.com/api/v4/projects/$CI_PROJECT_ID/merge_requests?source_branch=$CI_COMMIT_REF_NAME" | jq --raw-output ".[0].target_branch");
              if [ "$(git ls-remote origin $CI_TARGET_BRANCH_NAME | wc -l)" == 1 ]; then
                echo "Development Branch: $CI_TARGET_BRANCH_NAME (implicit by merge request target branch)";
                git checkout $CI_TARGET_BRANCH_NAME;
              else
                echo "Development Branch: master (fallback)";
              fi
            fi
        - cp -v dev-ops/gitlab/.psh.yaml.override .
        - /entrypoint supervisord > /dev/null 2>&1 &
    interruptible: true

# stage: unit

.phpunit_base:
    stage: unit
    variables:
        TEST_SUITES: "administration storefront checkout content framework profiling migration system elasticsearch docs"
    timeout: 1h 00m
    script:
        - echo matrix config
        - echo EACH_MR $EACH_MR
        - echo Mysql $MYSQL_IMAGE
        - echo Mysql cmd $MYSQL_CMD
        - echo Dev template $DEV_IMAGE
        - echo Features $FEATURE_ALL
        - ./psh.phar init
        - if [[ ! -h vendor/shopware/platform ]]; then echo 'vendor/shopware/platform should be a symlink'; exit 1; fi
        - mkdir -p build/artifacts/
        - echo -e
            "<?xml version="1.0" encoding="UTF-8"?>
            <testsuites>
            " > build/artifacts/phpunit.junit.xml
        - >
            for TEST_SUITE in $TEST_SUITES; do
                log_unit_file=build/artifacts/$TEST_SUITE.junit.xml
                set -x
                php vendor/bin/phpunit --configuration vendor/shopware/platform/phpunit.xml.dist --log-junit "$log_unit_file" --colors=never --testsuite "$TEST_SUITE"
                set +x
                tail -n +3 "$log_unit_file" | head -n -1 >> build/artifacts/phpunit.junit.xml
            done
        - echo -e "</testsuites>" >> "build/artifacts/phpunit.junit.xml"
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
        when: always
        paths:
            - development/build/artifacts/
            - development/var/log/*
            - $CI_PROJECT_DIR/stdout.log
        reports:
            junit: development/build/artifacts/phpunit.junit.xml

PHP Unit:
    extends: .phpunit_base
    image: $DEV_IMAGE
    stage: unit
    services:
        -   name: $MYSQL_IMAGE
            alias: mysql
            entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
        -   name: elastic/elasticsearch:7.1.1
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
    rules:
      - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::skip.*/'
        when: never
      - if: '$CI_PIPELINE_SOURCE == "schedule"'
      - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        changes:
          - "Migration*.php"
          - "**/Migration*.php"
      - if: '($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH =~ "^(master|6\..+)$") && $EACH_MR == "true"'
      - if: '$CI_MERGE_REQUEST_LABELS =~ /.*unit::all.*/'
      - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
        when: manual
        allow_failure: true
    parallel:
        matrix:
            -   EACH_MR: 'true'
                MYSQL_IMAGE: mysql:5.7
                DEV_IMAGE: shopware/development:latest
                FEATURE_ALL: ["false", "true"]
            -   MYSQL_IMAGE: mysql:5.7
                DEV_IMAGE:
                    - shopware/development:7.3
                    - shopware/development:7.4
                FEATURE_ALL: ["false", "true"]
            -   MYSQL_IMAGE:
                    - mysql:5.7
                    - mariadb:10.3
                    - mariadb:10.4
                DEV_IMAGE: shopware/development:latest
                FEATURE_ALL: ["false", "true"]
            -   MYSQL_IMAGE:
                    - mysql:8.0.19
                DEV_IMAGE: shopware/development:latest
                FEATURE_ALL: ["false", "true"]
                MYSQL_CMD: 'mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password --sql-require-primary-key=ON'

Javascript analysis:
    only:
        refs:
            - merge_requests
            - master
            - /^6\..*$/
            - schedules
            - pipelines
    stage: unit
    timeout: 1h 00m
    before_script: []
    script:
        - cd src/Administration/Resources
        - npm clean-install
        - npm run lerna -- bootstrap
        - cd app/administration
        - PROJECT_ROOT=$(pwd) node_modules/.bin/eslint --ext .js,.vue --format junit src test > eslint.junit.xml
    artifacts:
        reports:
            junit: src/Administration/Resources/app/administration/eslint.junit.xml

PHP analysis:
    cache:
        key: ${CI_JOB_NAME}
        paths:
            - development/var/cache/cs_fixer/
            - development/var/cache/phpstan/
            - development/var/cache/psalm/
    only:
        refs:
            - merge_requests
            - master
            - /^6\..*$/
    stage: unit
    services:
        -   name: mysql:5.7
            alias: mysql
    retry:
        max: 2
        when: runner_system_failure
    timeout: 1h 00m
    script:
        - ./psh.phar init
        - if [[ ! -h vendor/shopware/platform ]]; then echo 'vendor/shopware/platform should be a symlink'; exit 1; fi
        - cd ..
        - if [[ -f "cache.zip" ]]; then unzip -q cache.zip; fi
        - cd development
        - php dev-ops/analyze/generate-composer.php
        - php dev-ops/analyze/vendor/bin/ecs check platform/src --config platform/easy-coding-standard.php
        - php dev-ops/analyze/phpstan-config-generator.php
        - php dev-ops/analyze/vendor/bin/phpstan analyze --autoload-file=dev-ops/analyze/vendor/autoload.php --configuration platform/phpstan.neon --error-format gitlab | tee phpstan-report.json
        - php dev-ops/analyze/vendor/bin/psalm --config=platform/psalm.xml --threads=$(nproc) --diff --diff-methods --show-info=false
        - php bin/console changelog:check
    artifacts:
        reports:
            codequality: development/phpstan-report.json

Check generated Docs:
    only:
        refs:
            - merge_requests
            - master
            - /^6\..*$/
    stage: unit
    services:
        -   name: mysql:5.7
            alias: mysql
    retry:
        max: 2
        when: runner_system_failure
    timeout: 1h 00m
    script:
        - ./psh.phar init
        - if [[ ! -h vendor/shopware/platform ]]; then echo 'vendor/shopware/platform should be a symlink'; exit 1; fi
        - cd ..
        - cd development
        - echo "Checking the generated doc files"
        - bin/console docs:dump-erd
        - bin/console docs:dump-core-characteristics
        - cd platform
        - >
            if ! git diff --exit-code --ignore-submodules HEAD --; then
                echo "Docs have changed, please run 'bin/console docs:dump-core-characteristics' and 'bin/console docs:dump-erd'";
                git diff --exit-code;
                exit 1;
            else
                echo "Everything ok"
                exit 0;
            fi

# jest
Administration (Jest):
    only:
        refs:
            - merge_requests
            - master
            - /^6\..*$/
            - pipelines
    stage: unit
    timeout: 1h 00m
    services:
        -   name: mariadb:10.3
            alias: mysql
    script:
        - ./psh.phar init
        - ./psh.phar administration:install-dependencies
        - ./psh.phar administration:unit
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        reports:
            junit: development/build/artifacts/administration.junit.xml

Storefront (Jest):
    only:
        refs:
            - merge_requests
            - master
            - /^6\..*$/
            - pipelines
    stage: unit
    timeout: 1h 00m
    variables:
        PROJECT_ROOT: $CI_PROJECT_DIR/development
    services:
        -   name: mariadb:10.3
            alias: mysql
    script:
        - ./psh.phar init
        - ./psh.phar storefront:install-dependencies
        - npm --prefix vendor/shopware/platform/src/Storefront/Resources/app/storefront/ run unit
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        reports:
            junit: development/build/artifacts/storefront.junit.xml

# snippets

Validate snippets:
    only:
        refs:
            - merge_requests
            - master
            - /^6\..*$/
        changes:
            - src/**/snippet/**/*.json
    stage: unit
    timeout: 1h 00m
    services:
        -   name: mariadb:10.3
            alias: mysql
    script:
        - ./psh.phar init
        - php bin/console snippets:validate

# Stage: E2E

E2E:
    timeout: 2h 00m
    stage: E2E
    needs: [Javascript analysis]
    services:
        -   name: docker:18.09.7-dind
            alias: docker
        -   name: mariadb:10.3
            alias: mysql
    script:
        - echo matrix config
        - echo cypress_grep $cypress_grep
        - echo SECTION $SECTION
        - echo TEST_DIRECTORY $TEST_DIRECTORY
        - mkdir -p config/packages/
        - cp platform/src/Core/Framework/Resources/config/packages/e2e/e2e.yaml config/packages/shopware.yaml
        - echo FEATURE_ALL $FEATURE_ALL
        - echo BROWSER $BROWSER
        - echo cypress_usePercy $cypress_usePercy
        - ./psh.phar init --APP_ENV="prod"
        - ./psh.phar administration:init --APP_ENV="prod"
        - ./psh.phar storefront:init --APP_ENV="prod" --DB_NAME="shopware_e2e"
        - ./psh.phar e2e:dump-db --APP_ENV="prod"
        - E2E_BASE_PATH=vendor/shopware/platform/src/${SECTION}/Resources/app/$(echo ${SECTION} | tr '[:upper:]' '[:lower:]')/test/e2e
        - npm i @shopware-ag/e2e-testsuite-platform@1.3.1-beta.1 --prefix $E2E_BASE_PATH
        - forever start ${E2E_BASE_PATH}/node_modules/@shopware-ag/e2e-testsuite-platform/routes/cypress.js
        - chown -R 1000:1000 .
        - CYPRESS_CMD="cypress run"
        - if [[ $cypress_usePercy = "true" ]]; then export CYPRESS_CMD="npx percy exec -- cypress run"; npm install --save-dev @percy/cypress; fi
        - FULL_CYPRESS_CMD="npm install --production --prefix /e2e && export PERCY_TOKEN=$PERCY_TOKEN && $CYPRESS_CMD --browser chrome --headless --project /e2e --config baseUrl=http://docker.vm:8000 $CYPRESS_PARAMS --spec $TEST_DIRECTORY"
        - echo $FULL_CYPRESS_CMD
        - docker run --shm-size=2g --name cypress --add-host="docker.vm:$(hostname -I)" -e cypress_grep -e cypress_usePercy -e CYPRESS_baseUrl=http://docker.vm:8000 -v $(pwd)/${E2E_BASE_PATH}:/e2e -v $(pwd):/app -w /e2e --entrypoint "sh" cypress/included:4.10.0 -c "$FULL_CYPRESS_CMD"
    after_script:
        - npx mochawesome-merge development/build/artifacts/e2e/mochawesome/single-reports/mochawesome*.json > development/build/artifacts/e2e/mochawesome/report-final.json
        - npx mochawesome-report-generator development/build/artifacts/e2e/mochawesome/report-final.json --cdn true --reportDir development/build/artifacts/e2e/mochawesome
        - docker rm -f cypress
    artifacts:
        when: always
        paths:
            - development/build/artifacts/e2e/
            - development/var/log/*
            - $CI_PROJECT_DIR/stdout.log
        reports:
            junit: development/build/artifacts/e2e/*.xml
    rules:
        -   if: '$CI_MERGE_REQUEST_LABELS =~ /.*E2E::skip.*/ || ($cypress_grep == null && $CI_MERGE_REQUEST_LABELS =~ /.*E2E::only_base.*/)'
            when: never
            # run full tests if trigger by scheduled or another pipeline (production)
        -   if: '$cypress_grep == null && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "pipeline")'
            # skip @base jobs if trigger by scheduled or another pipeline (production)
        -   if: '$cypress_grep && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "pipeline")'
            when: never
            # run full tests if there are changes to migrations
        -   if: '$cypress_grep == null && $CI_PIPELINE_SOURCE == "merge_request_event"'
            changes:
                - "Migration*.php"
                - "**/Migration*.php"
            # skip @base jobs if there are changes to migrations, because the full set runs
        -   if: '$cypress_grep && $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_LABELS !~ /.*E2E::only_base.*/'
            changes:
                - "Migration*.php"
                - "**/Migration*.php"
            when: never
        -   if: '$cypress_grep == null && $CI_MERGE_REQUEST_LABELS =~ /.*E2E::all.*/'
        -   if: '$cypress_grep && $CI_MERGE_REQUEST_LABELS =~ /.*E2E::all.*/'
            when: never
        -   if: '$cypress_grep && ($CI_PIPELINE_SOURCE == "merge_request_event" || $CI_COMMIT_BRANCH =~ "^(master|6\..+)$")'
        -   if: '$cypress_grep == null && $CI_PIPELINE_SOURCE == "merge_request_event"'
            when: manual
            allow_failure: true
    parallel:
        matrix:
            -   cypress_grep: '@base'
                SECTION: 'Storefront'
                TEST_DIRECTORY:  "cypress/integration/**/*"
                FEATURE_ALL: ["false", "true"]
                BROWSER: 'chrome'
                CYPRESS_PARAMS: "--config numTestsKeptInMemory=0"
                cypress_usePercy: 'false'
            -   cypress_grep: '@base'
                SECTION: 'Administration'
                TEST_DIRECTORY:
                    - "cypress/integration/content/**/* cypress/integration/catalogue/**/*"
                    - "cypress/integration/customer/**/* cypress/integration/media-marketing/**/*"
                    - "cypress/integration/general/**/* cypress/integration/order/**/*"
                    - "cypress/integration/rule-product-stream/**/* cypress/integration/settings/**/*"
                FEATURE_ALL: "false" # ["false", "true"]
                BROWSER: 'chrome'
                CYPRESS_PARAMS: "--config numTestsKeptInMemory=0"
                cypress_usePercy: 'false'
            -   SECTION: 'Storefront'
                TEST_DIRECTORY: "cypress/integration/**/**/*"
                BROWSER: ['firefox', 'chrome']
                FEATURE_ALL: ["false", "true"]
                cypress_usePercy: 'false'
            -   SECTION: 'Administration'
                TEST_DIRECTORY:
                    - "cypress/integration/content/**/* cypress/integration/catalogue/**/* cypress/integration/customer/**/* cypress/integration/media-marketing/**/*"
                    - "cypress/integration/general/**/* cypress/integration/order/**/* cypress/integration/rule-product-stream/**/* cypress/integration/settings/**/*"
                BROWSER: ['firefox', 'chrome']
                FEATURE_ALL: ["false", "true"]
                cypress_usePercy: 'false'
            -   SECTION: 'Administration'
                TEST_DIRECTORY: "cypress/integration/visual/**/*"
                BROWSER: 'chrome'
                FEATURE_ALL: "false"
                cypress_usePercy: $CYPRESS_PERCY_USAGE

# Stage: build

Component Library:
    only:
        refs:
            - merge_requests
            - master
            - /^6\..*$/
        changes:
            - src/Administration/**/*
            - src/Storefront/**/*
    stage: Build
    image: node:10.8
    before_script: []
    dependencies: []
    needs: [Administration (Jest), Storefront (Jest)]
    variables:
        PROJECT_ROOT: $CI_PROJECT_DIR
    environment:
        name: Component Library
        url: https://component-library.shopware.com
    script:
        - npm install --prefix src/Administration/Resources/
        - npm run --prefix src/Administration/Resources lerna -- bootstrap
        - npm install --prefix src/Administration/Resources/app/administration/build/nuxt-component-library/
        - npm run --prefix src/Administration/Resources/app/administration/build/nuxt-component-library/ generate
        - "[[ -d build/artifacts/component-library/ ]] && (ls -1qA build/artifacts/component-library/ | grep -q .)"
    artifacts:
        paths:
            - build/artifacts/component-library/

# Stage: Generate docs

Generating docs:
    only:
        refs:
            - merge_requests
            - master
            - /^6\..*$/
        changes:
            - src/Docs/**/*
    stage: Generate docs
    dependencies: []
    services:
        -   name: docker:18.09.7-dind
            alias: docker
    script:
        - docker build -t shopware-plattform-plantuml dev-ops/docs/docker/plantuml/.
        - sh ./dev-ops/docs/scripts/render_puml.sh platform/src/Docs/Resources/current
        - ./psh.phar init-composer
        - php dev-ops/docs/scripts/convertMarkdownToDocs.php convert -i platform/src/Docs/Resources/current/ -o build/docs -u /shopware-platform-dev -s

# Stage: security

RIPS security:
    stage: Security
    image: php:7.3-alpine
    before_script: []
    allow_failure: true
    only:
        - master
        - schedules
    script:
        - apk add --no-cache libzip-dev && docker-php-ext-configure zip --with-libzip=/usr/include && docker-php-ext-install zip
        - wget https://github.com/rips/rips-cli/releases/download/3.2.0/rips-cli.phar -O /usr/bin/rips-cli
        - chmod 755 /usr/bin/rips-cli
        - rips-cli rips:scan:start -p . -t critical:0 -a ${RIPS_APP_ID} --progress
    interruptible: false

Symfony security check:
    stage: Security
    only:
        refs:
            - merge_requests
            - master
            - /^6\..*$/
            - schedules
            - pipelines
    image: shopware/development:latest
    before_script: []
    allow_failure: true
    script:
        - wget https://get.sensiolabs.org/security-checker.phar
        - composer install
        - php security-checker.phar security:check composer.lock
        - composer install -d src/Recovery/Common/
        - php security-checker.phar security:check src/Recovery/Common/composer.lock

NPM security check:
    stage: Security
    only:
        refs:
            - merge_requests
            - master
            - /^6\..*$/
            - schedules
            - pipelines
    image: shopware/development:latest
    before_script: []
    allow_failure: true
    script:
        - cd src/Administration/Resources/app/administration
        - npm i
        - npm install --save-dev audit-ci
        - node node_modules/.bin/audit-ci --moderate --allowlist http-proxy elliptic
        - cd ../../../../../src/Storefront/Resources/app/storefront
        - npm i
        - npm install --save-dev audit-ci
        - node node_modules/.bin/audit-ci --moderate --allowlist dot-prop http-proxy acorn jquery elliptic

# Stage: deploy

.Scrutinizer:
    stage: Deploy
    image: php:7.3-alpine
    allow_failure: true
    before_script: []
    only:
        - master
        - /^6\..*$/
    dependencies:
        - PHPUnit (MySQL)
    script:
        - wget https://scrutinizer-ci.com/ocular.phar
        - php ocular.phar code-coverage:upload
            --repository="g/shopware/platform"
            --revision="$CI_COMMIT_SHA"
            --format=php-clover
            development/build/artifacts/phpunit.clover.xml
    interruptible: false

Upload Component Library:
    stage: Deploy
    image: python:latest
    before_script: []
    only:
        refs:
            - master
            - /^6\..*$/
        changes:
            - src/Administration/**/*
            - src/Storefront/**/*
    dependencies:
        - Component Library
    script:
        - pip install awscli
        - cd build/artifacts/component-library
        - aws s3 sync --delete --acl public-read . s3://shopware-ui-component-library-docs/
        - aws cloudfront create-invalidation --distribution-id E18U17118IAC82 --paths "/*"
    interruptible: false

Create Major MR:
    stage: Deploy
    image: curlimages/curl:7.72.0
    rules:
    -   if: '$CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == "master"'
    allow_failure: true
    variables:
        GIT_STRATEGY: none
    before_script: []
    script:
        - >
            CI_NEW_MASTER_MAJOR_BRANCH=master-for-major-$(echo $CI_COMMIT_TIMESTAMP | grep -oE '(^[^:]*)');
            X_TOTAL=$(curl -I --header "Private-Token: $CREATE_MR_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests/?state=opened&labels=Update%20Major" | grep 'x-total:');
            if [ "$X_TOTAL" == "x-total: 0" ]; then
                echo "There is no open merge request to major branch. Will create one";
                echo "Create the new Branch:"$CI_NEW_MASTER_MAJOR_BRANCH;
                curl -X POST --header "Private-Token: $CREATE_MR_TOKEN" --header "Content-Type: application/json" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/branches?branch=$CI_NEW_MASTER_MAJOR_BRANCH&ref=master";
                echo "Create MR with Data:";
                DATA='{ "source_branch": "'$CI_NEW_MASTER_MAJOR_BRANCH'", "target_branch": "major", "title": "[CI] Update major", "description": "This MR was automatically created by this scheduled pipeline '"$CI_PIPELINE_URL"'", "labels": [ "workflow::review", "Update Major" ], "assignee_ids": [83, 12, 41, 11] }';
                echo $DATA;
                curl --header "Private-Token: $CREATE_MR_TOKEN" --header "Content-Type: application/json" --data "$DATA" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests";
                echo "MR Created";
            else
                echo "There is already an open merge request for master to major:"$X_TOTAL;
                echo "Create the new Branch:"$CI_NEW_MASTER_MAJOR_BRANCH;
                curl -X POST --header "Private-Token: $CREATE_MR_TOKEN" --header "Content-Type: application/json" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/branches?branch=$CI_NEW_MASTER_MAJOR_BRANCH&ref=master";
                echo "Create MR in development with Data:";
                DATA='{ "source_branch": "'$CI_NEW_MASTER_MAJOR_BRANCH'", "target_branch": "major", "title": "WIP: [CI] Update major - '$CI_COMMIT_TIMESTAMP'", "description": "This MR was automatically created by this scheduled pipeline '"$CI_PIPELINE_URL"'", "labels": [ "workflow::development", "Update Major" ], "assignee_ids": [83, 12, 41, 11] }';
                echo $DATA;
                curl --header "Private-Token: $CREATE_MR_TOKEN" --header "Content-Type: application/json" --data "$DATA" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/merge_requests";
                echo "MR Created";
            fi
