# requires /.gitlab/base.yml

# unit stage - This files contains all jobs belonging to the unit stage

Jest (Administration):
    extends: .base
    stage: unit
    needs: []
    services: []
    rules:
        - !reference [ .rules, skip ]
        - !reference [ .rules, run ]
        - when: always
    before_script:
      - composer install --no-scripts --no-plugins --quiet
      - bin/console framework:schema -s 'entity-schema' $ADMIN_PATH/test/_mocks_/entity-schema.json 2>/dev/null
      - !reference [ .scripts, install-node, script ]
      - (cd $ADMIN_PATH && npm ci)
    script:
        - npm --prefix $ADMIN_PATH run unit -- --silent
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        when: always
        paths:
            - build/artifacts/jest
        reports:
            junit: build/artifacts/jest/administration.junit.xml
            coverage_report:
                coverage_format: cobertura
                path: build/artifacts/jest/cobertura-coverage.xml

Jest (Storefront):
    extends: .base
    stage: unit
    needs: []
    services: []
    rules:
        - !reference [.rules, skip]
        - !reference [.rules, run]
        - when: always
    variables:
      NODE_VERSION: 12
    before_script:
      - composer install --no-scripts --no-plugins --quiet
      - bin/console framework:schema -s 'entity-schema' $ADMIN_PATH/test/_mocks_/entity-schema.json
      - !reference [ .scripts, install-node, script ]
      - (cd $STOREFRONT_PATH && npm ci)
    script:
        - npm --prefix "$STOREFRONT_PATH" run unit -- --silent
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
    artifacts:
        when: always
        paths:
            - build/artifacts/jest
        reports:
            junit: build/artifacts/jest/storefront.junit.xml
            coverage_report:
                coverage_format: cobertura
                path: build/artifacts/jest/cobertura-coverage.xml

PHP unit:
    extends: .base-no-setup
    image: shopware/development:7.4-composer-2
    stage: unit
    needs: []
    timeout: 30m
    services:
        -   name: mariadb:10.4
            alias: database
            entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
        -   name: redis
            alias: redis
        -   name: opensearchproject/opensearch:2.2.0
            alias: elasticsearch
            command: [ "bin/opensearch", "-Ediscovery.type=single-node", "-Eplugins.security.disabled=true" ]
    variables:
        APP_ENV: "test"
        FEATURE_ALL: "major"
        GIT_DEPTH: 0 # we need all commits for composer to detect the version which is then checked in a unit test
        REDIS_URL: redis://redis:6379
    rules:
        # do not run in merge trains - PHP Full should cover all tests
        - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
          when: never
        - !reference [.rules, skip]
        - !reference [.rules, run]
        - when: always
    before_script:
        - composer install --optimize-autoloader --no-interaction
        - mkdir -p config/jwt || true
    script:
        - php vendor/bin/phpunit
            --configuration phpunit.xml.dist
            --log-junit phpunit.junit.xml
            --exclude-group=needsWebserver,skip-paratest,not-deterministic,quarantined
            --testsuite "$TESTSUITE"
            --order-by default
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
        when: always
        reports:
            junit: phpunit.junit.xml
    parallel:
        matrix:
            - TESTSUITE: ["framework", "storefront,administration,system,profiling,maintenance,docs", "migration"]
            - TESTSUITE: ["content", "checkout", "elasticsearch", "integration"]
              RUNNER_INSTANCE_TYPE: m5.large

PHP bench:
    extends: .base-no-setup
    image: shopware/development:8.0-composer-2
    stage: unit
    needs: []
    timeout: 30m
    services:
        -   name: mariadb:10.4
            alias: database
            entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
        -   name: redis
            alias: redis
    variables:
        APP_ENV: "dev"
        RUNNER_INSTANCE_TYPE: m5.large
        REDIS_URL: redis://redis:6379
    rules:
        # do not run in merge trains
        - if: $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"
          when: never
        - changes:
            - '**/*.php'
            - '**/*.xml'
            - 'composer.json'

    before_script:
        - composer install --optimize-autoloader --no-interaction
        - mkdir -p config/jwt || true
    script:
        - php vendor/bin/phpbench run
            --report=compressed

PHP unit coverage:
    extends: .base-no-setup
    image: shopware/development:7.4-composer-2
    stage: unit
    needs: []
    timeout: 10m
    services: []
    variables:
        APP_ENV: "test"
    rules:
        - !reference [.rules, skip]
        - !reference [.rules, run]
        - when: always
    before_script:
        - composer install --optimize-autoloader --no-interaction --quiet
    script:
        - PHP_OPTIONS="-d pcov.enabled=1 -d pcov.directory=$PWD/src -d pcov.exclude='~(vendor|node_modules)~'"
        - php $PHP_OPTIONS vendor/bin/phpunit
            --configuration phpunit.xml.dist
            --bootstrap tests/unit/php/Common/UnitTestBootstrap.php
            --log-junit phpunit.junit.xml
            --testsuite unit
            --coverage-text
            --coverage-cobertura cobertura.xml | grep -v -E '^Shopware\\|^  Methods:'  # do not output covered files lines
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
      when: always
      paths:
        - cobertura.xml
      reports:
        junit: phpunit.junit.xml
        coverage_report:
          coverage_format: cobertura
          path: cobertura.xml

PHP migration coverage:
    extends: .base-no-setup
    image: shopware/development:7.4-composer-2
    stage: unit
    needs: []
    timeout: 10m
    services:
        -   name: mariadb:10.4
            alias: database
            entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
    variables:
        APP_ENV: "test"
        FEATURE_ALL: "false"
    rules:
        - !reference [.rules, skip]
        - !reference [.rules, run]
        - when: always
    before_script:
        - composer install --optimize-autoloader --no-interaction --quiet
    script:
        - PHP_OPTIONS="-d pcov.enabled=1 -d pcov.directory=$PWD/src -d pcov.exclude='~(vendor|Test|node_modules)~'"
        - php $PHP_OPTIONS vendor/bin/phpunit
            --configuration tests/migration/phpunit.xml
            --log-junit phpunit.junit.xml
            --testsuite migration-tests
            --coverage-text
            --coverage-cobertura cobertura.xml | grep -v -E '^Shopware\\|^  Methods:'  # do not output covered files lines
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
      when: always
      paths:
        - cobertura.xml
      reports:
        junit: phpunit.junit.xml
        coverage_report:
          coverage_format: cobertura
          path: cobertura.xml

PHP Full:
    extends: .long-running
    image: $DEV_IMAGE
    stage: unit
    needs: []
    services:
        -   name: $MYSQL_IMAGE
            alias: database
            entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
        -   name: elasticsearch:7.8.0
            alias: elasticsearch
            command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
        -   name: swaggerapi/swagger-validator-v2:v2.0.5
            alias: swagger
        -   name: redis
            alias: redis
    variables:
        TEST_SUITES: "docs administration storefront checkout content framework profiling system elasticsearch unit integration migration migration-tests"
        APP_ENV: test
        GIT_DEPTH: 0 # we need all commits for composer to detect the version which is then checked in a unit test
        RUNNER_INSTANCE_TYPE: m5.large
        ALLOW_FAILURE: "false"
        REDIS_URL: redis://redis:6379
    rules:
        - !reference [.rules, skip]
        - if: !reference [.rules, run-allow-failure, if ]
          allow_failure: true
        - !reference [.rules, run]
        - if: !reference [.rules, long-running-allow-failure, if]
          allow_failure: true
        # run if it's merge train and has changes or scheduled
        - if: !reference [.rules, long-running, if]
          changes:
            - phpunit.xml.dist
            - '**/Resources/views/*.html.twig'
            - '**/*.{php,xml,yaml,json,js,twig}'
            - 'adr/*'
            - .gitlab/stages/02-unit.yml
    parallel:
        matrix:
            -   MYSQL_IMAGE: mariadb:10.4
                DEV_IMAGE: shopware/development:8.0-composer-2
                FEATURE_ALL: 'false'
            -   MYSQL_IMAGE:
                    - mysql:5.7
                    - mariadb:10.3
                DEV_IMAGE: shopware/development:8.0-composer-2
                FEATURE_ALL: [ "false", "major" ]
            -   MYSQL_IMAGE:
                    - mysql:8.0
                DEV_IMAGE: [ "shopware/development:7.4-composer-2", "shopware/development:8.0-composer-2", "shopware/development:8.1-composer-2" ]
                FEATURE_ALL: [ "false", "major" ]
                MYSQL_CMD: 'mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password --sql-require-primary-key=ON'
            -   MYSQL_IMAGE: mariadb:10.4
                DEV_IMAGE: shopware/development:7.4-composer-2
                FEATURE_ALL: 'false'
                PREFER_LOWEST: 'true'
            -   MYSQL_IMAGE: mariadb:10.4
                DEV_IMAGE: shopware/development:7.4-composer-2
                FEATURE_ALL: 'false'
                ONLY_CORE: 'true'
                TEST_SUITES: "checkout content framework profiling system integration migration"
            -   MYSQL_IMAGE: mariadb:10.5
                DEV_IMAGE: shopware/development:7.4-composer-2
                FEATURE_ALL: 'false'
                DEPENDENCY_DEV: 'true'
                TEST_SUITES: "checkout content framework profiling system integration migration"
                ALLOW_FAILURE: 'true'
    script:
        - >
            if [ "$DEPENDENCY_DEV" == "true" ]; then
               composer config minimum-stability dev
               composer update --no-interaction --optimize-autoloader
            fi
        - >
            if [ "$PREFER_LOWEST" == "true" ]; then
                composer update --prefer-lowest --optimize-autoloader
                # disable symfony deprecation check, when running with lowest dependency versions
                export SYMFONY_DEPRECATIONS_HELPER=disabled
            fi
        - >
            if [ "$ONLY_CORE" == "true" ]; then
                sed -i '/Shopware\\Administration/d' ./config/bundles.php
                sed -i '/ Shopware\\Docs/d' ./config/bundles.php
                sed -i '/Shopware\\Storefront/d' ./config/bundles.php
                sed -i '/Shopware\\Elasticsearch/d' ./config/bundles.php
                rm -rf tests/integration/php/Administration
                rm -rf tests/integration/php/Elasticsearch
                rm -rf tests/integration/php/Storefront
                jq 'del(.replace."shopware/storefront", .replace."shopware/administration", .replace."shopware/elasticsearch", ."autoload-dev", .autoload."psr-4"."Shopware\\\\Administration\\\\", .autoload."psr-4"."Shopware\\\\Docs\\\\", .autoload."psr-4"."Shopware\\\\Storefront\\\\", .autoload."psr-4"."Shopware\\\\Elasticsearch\\\\")' composer.json > composer.json.tmp && mv composer.json.tmp composer.json
                composer dump-autoload
            fi
        - FAILED=0
        - >
            for SUITE in $TEST_SUITES; do
                if [[ $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train" || 0 ]]; then
                  composer run phpunit -- --testsuite=$SUITE --log-junit phpunit.$SUITE.junit.xml --colors=never --stop-on-failure --exclude-group=quarantined;
                else
                  composer run phpunit -- --testsuite=$SUITE --log-junit phpunit.$SUITE.junit.xml --colors=never --exclude-group=quarantined || FAILED=1
                fi
            done
        - '[[ $FAILED -eq 0 ]]'
    after_script:
      - !reference [.scripts, handle-failed-merge-train, after_script]
      - !reference [.upload-junit-xml, after_script]
    artifacts:
        when: always
        paths:
            - phpunit.*.junit.xml
            - var/log/*
        reports:
            junit: phpunit.*.junit.xml

PHP Full quarantined:
    extends: PHP Full
    stage: quarantine
    parallel:
        matrix:
            - MYSQL_IMAGE: mariadb:10.4
              DEV_IMAGE: shopware/development:8.0-composer-2
              FEATURE_ALL: 'false'
              ALLOW_FAILURE: 'true'
    script:
      - composer run phpunit -- --group=quarantined --log-junit phpunit.quarantined.junit.xml --colors=never
    after_script: []
