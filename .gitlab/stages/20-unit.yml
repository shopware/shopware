# yaml-language-server: $schema=https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json
# requires /.gitlab/base.yml

# unit stage - This files contains all jobs belonging to the unit stage

Jest (Administration):
  extends: .base-with-node
  stage: unit
  needs: []
  services: []
  variables:
    KUBERNETES_CPU_LIMIT: "2"
    KUBERNETES_MEMORY_LIMIT: "6Gi"
  before_script:
    - !reference [.scripts, init, composer]
    - !reference [.scripts, init, npm, admin]
    - composer run admin:generate-entity-schema-types
  tags:
    - shopware-amd64
  script:
    - echo -e "\e[0Ksection_start:$(date +%s):jest[collapsed=false]\r\e[0Kjest output"
    - npm --prefix $ADMIN_PATH run unit-setup
    - npm --prefix $ADMIN_PATH run unit -- --silent --maxWorkers=6 --no-cache | grep -A 5 -E '^(All files|Fail|    )'
    - echo -e "\e[0Ksection_end:`date +%s`:jest\r\e[0K"
  coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/artifacts/jest/cobertura-coverage.xml

Jest (Administration with disabled compat mode):
  extends: Jest (Administration)
  script:
    - echo -e "\e[0Ksection_start:$(date +%s):jest[collapsed=false]\r\e[0Kjest output"
    - npm --prefix $ADMIN_PATH run unit-setup
    - npm --prefix $ADMIN_PATH run unit:disabled-compat -- --silent --maxWorkers=6 --no-cache | grep -A 5 -E '^(All files|Fail|    )'
    - echo -e "\e[0Ksection_end:`date +%s`:jest\r\e[0K"

Jest (Storefront):
  extends: .base-with-node
  stage: unit
  needs: []
  services: []
  rules:
    - !reference [.rules, skip]
    - !reference [.rules, run]
    - when: always
  before_script:
    - !reference [.scripts, init, npm, storefront]
  script:
    - echo -e "\e[0Ksection_start:$(date +%s):jest[collapsed=false]\r\e[0Kjest output"
    - npm --prefix "$STOREFRONT_PATH" run unit -- --silent --maxWorkers=2 | grep -A 5 -E '^(All files|Fail|    )'
    - echo -e "\e[0Ksection_end:`date +%s`:jest\r\e[0K"
  coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/artifacts/jest/cobertura-coverage.xml

PHP integration:
  extends: .base-no-setup
  stage: unit
  needs: []
  timeout: 30m
  tags:
    - shopware-amd64
  services:
    - name: mariadb:10.11
      alias: database
      entrypoint: ["sh", "-c", "docker-entrypoint.sh $MYSQL_CMD"]
    - name: redis:7.0
      alias: redis
    - name: opensearchproject/opensearch:2.2.0
      alias: elasticsearch
      command:
        [
          "bin/opensearch",
          "-Ediscovery.type=single-node",
          "-Eplugins.security.disabled=true",
        ]
  variables:
    APP_ENV: "test"
    FEATURE_ALL: "major"
    GIT_DEPTH: 0 # we need all commits for composer to detect the version which is then checked in a unit test
    REDIS_URL: redis://redis:6379
  rules:
    # do not run in merge trains - PHP Full should cover all tests
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train" || $CI_COMMIT_REF_PROTECTED == "true"'
      when: never
    - !reference [.rules, skip]
    - !reference [.rules, run]
    - when: always
  parallel:
    matrix:
      - FEATURE_ALL: ["false", "major"]
  before_script:
    - !reference [.scripts, init, composer_full]
    - mkdir -p config/jwt || true
    - "rm -Rf /var/www/html/public || true"
    - ln -s $WEB_DOCUMENT_ROOT /var/www/html/public
    - /usr/bin/supervisord -c /etc/supervisord.conf > /dev/null 2>&1 &
  script:
    - php vendor/bin/phpunit
      --configuration phpunit.xml.dist
      --log-junit phpunit.junit.xml
      --exclude-group=needsWebserver,not-deterministic
      --testsuite integration,devops
      --order-by default

PHP bench:
  extends: .base-no-setup
  stage: unit
  tags:
    - shopware-amd64
  timeout: 30m
  allow_failure: true
  needs: []
  services:
    - name: mariadb:11.0
      alias: database
      entrypoint: ["sh", "-c", "docker-entrypoint.sh $MYSQL_CMD"]
    - name: redis:7.0
      alias: redis
  variables:
    APP_ENV: "dev"
    REDIS_URL: redis://redis:6379
    MYSQL_CMD: "mariadbd"
  rules:
    # do not run in merge trains
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train" || $CI_COMMIT_REF_PROTECTED == "true"'
      when: never
    - !reference [.rules, skip]
    - !reference [.rules, run]
    - changes:
        - "**/*.php"
        - "**/*.xml"
        - "composer.json"

  before_script:
    - !reference [.scripts, init, composer]
    - mkdir -p config/jwt || true
  script:
    - php vendor/bin/phpbench run
      --report=compressed

Open Api Schema validation:
  extends: .base-no-setup
  image: ${CI_REGISTRY}/infrastructure/docker-base/ci-build:${CI_BUILD_IMAGE_TAG}
  stage: unit
  timeout: 10m
  needs: [build image]
  tags:
    - shopware-amd64
  variables:
    APP_ENV: "dev"
    TEST_WEB_INSTALLER: 1
    DATABASE_URL: mysql://root:app@database:3306/root
  services:
    - name: mariadb:10.11
      alias: database
      entrypoint: ["sh", "-c", "docker-entrypoint.sh $MYSQL_CMD"]
    - name: "${CI_REGISTRY_IMAGE}/ci-e2e:$CI_PIPELINE_ID"
      alias: shopware.test
      entrypoint: ["sh", "-c", "bin/console system:generate-jwt && /entrypoint"]
      variables:
        PROJECT_ROOT: /var/www/html
  rules:
    # do not run in merge trains
    - if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train" || $CI_COMMIT_REF_PROTECTED == "true"'
      when: never
    - !reference [.rules, skip]
    - !reference [.rules, run]
    - changes:
        - "**/*.php"
        - "**/*.xml"
        - "composer.json"
        - "src/Core/Framework/Api/ApiDefinition/Generator/Schema/**/*.json"
  before_script:
    - !reference [.scripts, init, composer]
    - composer run init:db
    - mkdir -p config/jwt || true
  script:
    - export STOREFRONT_ID=$(bin/console sales-channel:list --output json | jq -r '.[] | select(.name == "Storefront") | .id')
    - export OPENAPI_ACCESS_KEY=$(mysql -u root -h database -papp root -se "SELECT access_key FROM sales_channel WHERE id = 0x${STOREFRONT_ID}";)
    - printf "OPENAPI_JSON_URL=http://shopware.test:8000\nSHOPWARE_ADMIN_USERNAME=admin\nSHOPWARE_ADMIN_PASSWORD=shopware\nOPENAPI_ACCESS_KEY=${OPENAPI_ACCESS_KEY}" > .env
    - mkdir api-types
    - touch api-types/storeApiSchema.json
    - touch api-types/adminApiSchema.json
    - npx @shopware/api-gen loadSchema --apiType=store --filename=storeApiSchema.json
    - npx @shopware/api-gen loadSchema --apiType=admin --filename=adminApiSchema.json
    - npm i -g @redocly/cli@latest
    - redocly lint --skip-rule operation-4xx-response --skip-rule no-server-example.com --skip-rule no-unused-components ./api-types/storeApiSchema.json
    - redocly lint --skip-rule operation-4xx-response --skip-rule no-server-example.com --skip-rule no-unused-components ./api-types/adminApiSchema.json
    - "echo '{\"$schema\": \"https://raw.githubusercontent.com/shopware/frontends/main/packages/api-gen/api-gen.schema.json\", \"rules\": [\"COMPONENTS_API_ALIAS\"] }' > api-gen.config.json"
    - npx @shopware/api-gen validateJson --apiType=store
    - npx @shopware/api-gen validateJson --apiType=admin
    - npx @shopware/api-gen generate --apiType=store
    - npx @shopware/api-gen generate --apiType=admin
    - npm i -g typescript
    - npx tsc ./api-types/storeApiTypes.d.ts
    - npx tsc ./api-types/adminApiTypes.d.ts

PHP unit coverage:
  extends: .base-no-setup
  stage: unit
  needs: []
  timeout: 10m
  services: []
  variables:
    APP_ENV: "test"
  rules:
    - !reference [.rules, skip]
    - !reference [.rules, run]
    - when: always
  before_script:
    - !reference [.scripts, init, composer]
    - mkdir -p coverage || true
  script:
    - PHP_COVERAGE_OPTIONS=""
    - >
      if [[ $CI_PIPELINE_SOURCE == "schedule" ]]; then
         PHP_COVERAGE_OPTIONS="--coverage-html coverage_tmp/"
      fi
    - PHP_OPTIONS="-d pcov.enabled=1 -d pcov.directory=$PWD/src -d pcov.exclude='~(vendor|node_modules)~'"
    - php $PHP_OPTIONS vendor/bin/phpunit
      --configuration phpunit.xml.dist
      --bootstrap tests/unit/Common/UnitTestBootstrap.php
      --log-junit phpunit.junit.xml
      --testsuite unit
      --coverage-text
      $PHP_COVERAGE_OPTIONS
      --coverage-cobertura cobertura.xml | grep -v -E '^Shopware\\|^  Methods:' # do not output covered files lines
  after_script:
    - >
      if [[ $CI_PIPELINE_SOURCE == "schedule" ]]; then
         mv coverage_tmp coverage
      fi
  coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml
    paths:
      - coverage/

PHP migration coverage:
  extends: .base-no-setup
  stage: unit
  needs: []
  timeout: 10m
  services:
    - name: mariadb:10.11
      alias: database
      entrypoint: ["sh", "-c", "docker-entrypoint.sh $MYSQL_CMD"]
  variables:
    APP_ENV: "test"
    FEATURE_ALL: "false"
  rules:
    - !reference [.rules, skip]
    - !reference [.rules, run]
    - when: always
  before_script:
    - !reference [.scripts, init, composer]
  script:
    - PHP_OPTIONS="-d pcov.enabled=1 -d pcov.directory=$PWD/src -d pcov.exclude='~(vendor|Test|node_modules)~'"
    - php $PHP_OPTIONS vendor/bin/phpunit
      --configuration tests/migration/phpunit.xml
      --log-junit phpunit.junit.xml
      --testsuite migration
      --coverage-text
      --coverage-cobertura cobertura.xml | grep -v -E '^Shopware\\|^  Methods:' # do not output covered files lines
  coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: cobertura.xml

PHP Full:
  extends: .long-running
  stage: unit
  tags:
    - shopware-amd64
  services:
    - name: $MYSQL_IMAGE
      alias: database
      pull_policy: always
      entrypoint: ["sh", "-c", "docker-entrypoint.sh $MYSQL_CMD"]
    - name: opensearchproject/opensearch:2.2.0
      alias: elasticsearch
      command:
        [
          "bin/opensearch",
          "-Ediscovery.type=single-node",
          "-Eplugins.security.disabled=true",
        ]
    - name: redis:7.0
      alias: redis
  variables:
    TEST_SUITES: "integration devops migration"
    APP_ENV: test
    GIT_DEPTH: 0 # we need all commits for composer to detect the version which is then checked in a unit test
    ALLOW_FAILURE: "false"
    REDIS_URL: redis://redis:6379
    FEATURE_ALL: "false"
  rules:
    - !reference [.rules, skip]
    - if: !reference [.rules, run-allow-failure, if]
      allow_failure: true
    - !reference [.rules, run]
    - if: !reference [.rules, long-running-allow-failure, if]
      allow_failure: true
    # run if it's merge train and has changes or scheduled
    - if: !reference [.rules, long-running, if]
      changes:
        - phpunit.xml.dist
        - "**/Resources/views/*.html.twig"
        - "**/*.{php,xml,yaml,json,js,twig}"
        - "adr/*"
        - .gitlab/stages/20-unit.yml
  parallel:
    matrix:
      - MYSQL_IMAGE: mysql:8
        CI_IMAGE_TAG:
          - "latest"
          - "php8.3"
        FEATURE_ALL: ["false", "major"]
        MYSQL_CMD: "mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --sql-require-primary-key=ON"
      - MYSQL_IMAGE: mysql:8.0.36
      - MYSQL_IMAGE: mysql:8.4
      - MYSQL_IMAGE: mysql:9.0
      - MYSQL_IMAGE: mariadb:10.11
      - MYSQL_IMAGE: mariadb:10.11
        PREFER_LOWEST: "prefer lowest"
        # Don't run devops tests with lowest dependencies, as phpstan has known issues with mismatched in installed package versions: https://github.com/phpstan/phpdoc-parser/issues/188
        # Also running devops tests don't provide value with prefer lowest, as the scripts are always executed with the latest dependencies
        TEST_SUITES: "integration unit migration"
      - MYSQL_IMAGE: mariadb:10.11
        ONLY_CORE: "only core"
        TEST_SUITES: "integration migration"
      - MYSQL_IMAGE: mariadb:11.0
        DEPENDENCY_DEV: "dev dependencies"
        ALLOW_FAILURE: "true"
        MYSQL_CMD: "mariadbd"
        TEST_SUITES: "integration unit migration"
  before_script:
    - >
      if [ -n "$FAKE_PHP_VERSION" ]; then
        composer config platform.php $FAKE_PHP_VERSION
        composer config -d vendor-bin/rector platform.php $FAKE_PHP_VERSION
      fi
    - !reference [.scripts, init, composer]
    - mkdir -p config/jwt || true
    - "rm -Rf /var/www/html/public || true"
    - ln -s $WEB_DOCUMENT_ROOT /var/www/html/public
    - /usr/bin/supervisord -c /etc/supervisord.conf > /dev/null 2>&1 &
  script:
    - "rm -Rf custom/plugins/* || true"
    - >
      if [ "$DEPENDENCY_DEV" == "dev dependencies" ]; then
         composer config minimum-stability dev
         composer update --no-interaction --optimize-autoloader
      fi
    - >
      if [ "$PREFER_LOWEST" == "prefer lowest" ]; then
          composer update --prefer-lowest --optimize-autoloader
          # disable symfony deprecation check, when running with lowest dependency versions
          export SYMFONY_DEPRECATIONS_HELPER=disabled
      fi
    - >
      if [ "$ONLY_CORE" == "only core" ]; then
          sed -i '/Shopware\\Administration/d' ./config/bundles.php
          sed -i '/Shopware\\Storefront/d' ./config/bundles.php
          sed -i '/Shopware\\Elasticsearch/d' ./config/bundles.php
          rm -rf src/Administration/Controller
          rm -rf tests/integration/Administration
          rm -rf tests/integration/Elasticsearch
          rm -rf tests/integration/Storefront
          rm -rf tests/migration/Administration
          composer dump-autoload -o
          php bin/console lint:container
      fi
    - unset SHOPWARE_CACHE_ID
    - "sed -i -e 's|opcache.enable_cli = 1|opcache.enable_cli = 0|' /usr/local/etc/php/conf.d/docker.ini"
    - FAILED=0
    - >
      for SUITE in $TEST_SUITES; do
          if [[ $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train" || 0 ]]; then
            composer run phpunit -- --testsuite=$SUITE --log-junit phpunit.$SUITE.junit.xml --colors=never;
          else
            composer run phpunit -- --testsuite=$SUITE --log-junit phpunit.$SUITE.junit.xml --colors=never || FAILED=1
          fi
      done
    - "[[ $FAILED -eq 0 ]]"
  after_script:
    - !reference [.scripts, handle-failed-merge-train, after_script]

Coverage check:
  extends: .base-no-setup
  stage: unit
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"'
      allow_failure: true
  needs:
    - Jest (Administration)
    - Jest (Storefront)
    - PHP unit coverage
    - PHP migration coverage
  script:
    - .gitlab/bin/coverage.bash check_coverage ${CI_MERGE_REQUEST_IID} ${CI_PIPELINE_ID}
