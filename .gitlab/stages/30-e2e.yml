# yaml-language-server: $schema=https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json
# requires /.gitlab/base.yml

.e2e-base:
  image: shopware/development:8.2-composer-2
  extends:
    - .long-running
  tags:
    - shopware-amd64
  needs: [Build, "Jest (Administration)"]
  dependencies: [Build]
  services:
    - name: mariadb:10.11
      alias: database
  variables:
    APP_ENV: e2e
    CYPRESS_baseUrl: "http://localhost:8000"
    CYPRESS_localUsage: 1
    CYPRESS_screenshotsFolder: $CI_PROJECT_DIR/var/log/screenshots
    CYPRESS_DD_API_KEY: "$DATADOG_API_KEY"
    SHOPWARE_HTTP_CACHE_ENABLED: 0
    SHOPWARE_DISABLE_UPDATE_CHECK: "true"
    CYPRESS_storefrontName: "E2E install test"
  before_script:
    - echo -e "\e[0Ksection_start:$(date +%s):init[collapsed=true]\r\e[0Ke2e preparation"
    - cp public/.htaccess.dist public/.htaccess
    - git config --global --add safe.directory $CI_PROJECT_DIR
    - !reference [.scripts, init, composer]
    - touch install.lock
    - mkdir -p config/jwt custom/plugins || true
    - npm --prefix tests/e2e ci
    - >
      if [[ -r context.tar.gz ]]; then
          tar -xzf context.tar.gz
          mysql -uroot -papp -hdatabase -e 'CREATE database `root`';
          mysql -uroot -papp -hdatabase root -e 'source var/database.sql';
          bin/console system:generate-jwt || true
          touch install.lock
      else
          composer run setup
          composer run e2e:sdk-plugin:fixture-to-plugin
      fi
    - bin/console assets:install
    - bin/console e2e:dump-db
    - bin/console theme:compile
    - echo -e "\e[0Ksection_end:`date +%s`:init\r\e[0K"
    - echo 'LogFormat "[httpd:access] %V:%p %h %l %u %t \"%r\" %>s bytesIn:%I bytesOut:%O reqTime:%{ms}T" dockerlog' > /opt/docker/etc/httpd/conf.d/20-custom-log.conf
    - SERVICE_PHPFPM_OPTS=--allow-to-run-as-root CONTAINER_UID=root /entrypoint supervisord > /dev/null 2>&1 &
  after_script:
    - !reference [.scripts, handle-failed-merge-train, after_script]
    - !reference [.upload-junit-xml, after_script]
  artifacts:
    when: always
    paths:
      - var/log/*
    reports:
      junit: var/log/e2e/results/single-reports/*.xml

E2E:
  extends:
    - .e2e-base
  stage: E2E
  variables:
    CYPRESS_TARGET_BRANCH: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    CYPRESS_TARGET_COMMIT: $CI_MERGE_REQUEST_DIFF_BASE_SHA
    CYPRESS_COMMIT_BRANCH: $CI_COMMIT_BRANCH
    CYPRESS_PIPELINE_ID: $CI_PIPELINE_ID
    CYPRESS_grepTags: "-quarantined"
  parallel:
    matrix:
      - BROWSER: "chrome"
        FEATURE_ALL: "false"
        TEST_DIRECTORY:
          - "cypress/e2e/administration/settings/sw-flow/*,cypress/e2e/administration/settings/sw-import-export/*,cypress/e2e/administration/settings/sw-integration/*,cypress/e2e/administration/settings/sw-mail-template/*,cypress/e2e/administration/sdk-plugin/**/*"
          - "cypress/e2e/administration/settings/sw-settings-*/*"
          - "cypress/e2e/administration/catalogue/**/*,cypress/e2e/administration/media-marketing/**/*,cypress/e2e/administration/customer/**/*,cypress/e2e/administration/rule-product-stream/**/*"
          - "cypress/e2e/administration/order/**/*,cypress/e2e/administration/content/**/*,cypress/e2e/administration/general/**/*"
          - "cypress/e2e/storefront/**/*"

  script:
    - >
      if [[ $CI_MERGE_REQUEST_EVENT_TYPE == "merge_train" ]]; then
        export CYPRESS_INTERRUPT_ON_ERROR="true"
      fi
    - export CYPRESS_INTERRUPT_ON_ERROR="true"
    - composer run e2e:cypress -- run
      --config retries=1
      --browser "$BROWSER"
      --spec "$TEST_DIRECTORY"
      --headless

Changed E2E:
  extends: E2E
  parallel:
    matrix:
      - _DUMMY_VAR: ["dummy1", "dummy2", "dummy3", "dummy4", "dummy5"]
  rules:
    - !reference [.rules, skip]
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"'
      changes:
        - "tests/e2e/cypress/e2e/administration/**/*.cy.js"
        - "tests/e2e/cypress/e2e/storefront/**/*.cy.js"
  script:
    - 'CHANGED_FILES=$(git diff --diff-filter=ACMRT --name-only ${CI_MERGE_REQUEST_DIFF_BASE_SHA} | grep -E "^tests/e2e/cypress/e2e/(administration|storefront)")'
    - 'echo "Changed files: $CHANGED_FILES"'
    # remove prefix tests/e2e/, replace newlines with commas and trim trailing comma
    - 'TEST_SPEC=$(echo "${CHANGED_FILES}" | sed "s|^tests/e2e/||g" | tr "\\n" "," | sed "s/,*$//g")'
    - 'echo "Test spec: $TEST_SPEC"'
    - composer run e2e:cypress-repeat -- run
      -n 10
      --config retries=0
      --browser chrome
      --spec "$TEST_SPEC"
      --headless

acceptance:
  extends:
    - .long-running
  image: mcr.microsoft.com/playwright:v1.45.0-jammy
  needs: [build image]
  tags:
    - shopware-amd64
  stage: E2E
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"'
      changes:
        - "tests/acceptance/**/*"
    - !reference [.rules, skip]
    - !reference [.rules, run]
    - !reference [.rules, long-running]
  services:
    - name: mysql:8
      alias: database
      pull_policy: always
      entrypoint:
        [
          "sh",
          "-c",
          "docker-entrypoint.sh mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --sql-require-primary-key=ON",
        ]
    - name: redis:7.0
      alias: redis
    - name: "${CI_REGISTRY_IMAGE}/ci-e2e:$CI_PIPELINE_ID"
      alias: shopware.test
  variables:
    APP_ENV: prod
    SHOPWARE_HTTP_CACHE_ENABLED: 0
    SHOPWARE_DISABLE_UPDATE_CHECK: "true"
    PROJECT_ROOT: /var/www/html
    DATABASE_URL: mysql://root:app@database:3306/root
    APP_URL: http://shopware.test:8000
    ACCEPTANCE_PROJECT: Platform
    KUBERNETES_SERVICE_CPU_REQUEST: "500m"
    KUBERNETES_SERVICE_CPU_LIMIT: "2"
    KUBERNETES_SERVICE_MEMORY_REQUEST: "512Mi"
    KUBERNETES_SERVICE_MEMORY_LIMIT: "2Gi"
    PHP_OPCACHE_VALIDATE_TIMESTAMPS: 1
  before_script:
    - cd tests/acceptance
    - npm ci
  script:
    - npx playwright test --workers=1 --project=${ACCEPTANCE_PROJECT}
  after_script:
    - |
      echo "Link to HTML report"
      echo "-------------------------------------------------------------------------------------------------------------------------------------------------------"
      echo "https://shopware.pages.apps.shopware.io/-/6/product/$CI_PROJECT_NAME/-/jobs/$CI_JOB_ID/artifacts/tests/acceptance/playwright-report/index.html"
      echo "-------------------------------------------------------------------------------------------------------------------------------------------------------"
  artifacts:
    expire_in: 1 day
    when: always
    paths:
      - $CI_PROJECT_DIR/tests/acceptance/test-results/*
      - $CI_PROJECT_DIR/tests/acceptance/playwright-report/*

acceptance (changed):
  extends: acceptance
  needs: [acceptance]
  parallel:
    matrix:
      - _DUMMY_VAR: ["dummy1", "dummy2", "dummy3", "dummy4", "dummy5"]
  rules:
    - !reference [.rules, skip]
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"'
      changes:
        - "tests/acceptance/tests/**/*.spec.ts"
  script:
    - 'export CHANGED_FILES="$(git diff --diff-filter=ACMRT --name-only ${CI_MERGE_REQUEST_DIFF_BASE_SHA} | grep -E \"^tests/acceptance/tests/\")"'
    - 'echo "Changed files: $CHANGED_FILES"'
    - >
      if [[ -z "${CHANGED_FILES}" ]]; then
        printf "No changed test files found.\n"
        exit 0
      fi
    # remove prefix tests/acceptance/
    - 'TEST_SPEC=$(echo "${CHANGED_FILES}" | sed "s|^tests/acceptance/||g")'
    - 'echo "Test spec: $TEST_SPEC"'
    - npx playwright test --workers=2 --repeat-each 10 --retries 0 --trace retain-on-failure --project Platform -- $TEST_SPEC

install test:
  extends: acceptance
  variables:
    ACCEPTANCE_PROJECT: Install
    APP_ENV: dev
    SHOPWARE_HTTP_CACHE_ENABLED: 0
    SHOPWARE_DISABLE_UPDATE_CHECK: "true"
    PROJECT_ROOT: /var/www/html
    APP_URL: http://shopware.test:8000
    DATABASE_URL: mysql://root:app@database:3306/install_test
    TEST_WEB_INSTALLER: 1 # skip automatic setup
    SHOPWARE_SKIP_WEBINSTALLER: 0 # we want to test the web installer/updater

update test:
  extends: acceptance
  needs: [build image tagged, tested_update_tags]
  dependencies: [build image tagged, tested_update_tags]
  rules:
    - if: "$SHOPWARE_CORE_VERSION == ''"
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - src/WebInstaller/**/*
        - tests/acceptance/tests/Update/**/*
    - !reference [.rules, long-running]
  parallel:
    matrix:
      - SHOPWARE_CORE_VERSION: [
            # these variables are filled by the dotenv report tested_update_tags.env
            "${PREV_MAJOR_MIN_TAG}",
            "${PREV_MAJOR_MAX_TAG}",
            "${CUR_MAJOR_MIN_TAG}",
            "${CUR_MAJOR_MAX_TAG}",
          ]
  services:
    - name: mysql:8.3
      alias: database
      pull_policy: always
      entrypoint:
        [
          "sh",
          "-c",
          "docker-entrypoint.sh mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --sql-require-primary-key=ON",
        ]
    - name: redis:7.0
      alias: redis
    - name: "${CI_REGISTRY_IMAGE}/ci-e2e:${SHOPWARE_CORE_VERSION}_${CI_PIPELINE_ID}"
      alias: shopware.test
  variables:
    ACCEPTANCE_PROJECT: Update
    APP_ENV: dev
    SHOPWARE_HTTP_CACHE_ENABLED: 0
    PROJECT_ROOT: /var/www/html
    APP_URL: http://shopware.test:8000
    DATABASE_URL: mysql://root:app@database:3306/root
    SHOPWARE_SKIP_WEBINSTALLER: 0 # we want to test the web installer/updater
    SHOPWARE_DISABLE_UPDATE_CHECK: "0"
    SW_RECOVERY_NEXT_VERSION: 6.6.9999999.9999999
    SW_RECOVERY_NEXT_BRANCH: dev-trunk
    SW_RECOVERY_REPOSITORY: '{"type": "path", "url": "custom/packages/*", "options": { "symlink": true } }'
  before_script:
    - echo "Testing update from version $SHOPWARE_CORE_VERSION"
    - cd tests/acceptance
    - npm ci
