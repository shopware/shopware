# yaml-language-server: $schema=https://gitlab.com/gitlab-org/gitlab/-/raw/master/app/assets/javascripts/editor/schema/ci.json
---
.rule_branch_rufus_match:
  if: "$CI_MERGE_REQUEST_LABELS =~ /.*branch::rufus::match.*/"
  when: on_success

.rule_branch_commercial_match:
  if: "$CI_MERGE_REQUEST_LABELS =~ /.*branch::commercial::match.*/"
  when: on_success

.rule_exclude_on_branch_rufus_match:
  if: "$CI_MERGE_REQUEST_LABELS =~ /.*branch::rufus::match.*/"
  when: never

.rule_exclude_on_branch_commercial_match:
  if: "$CI_MERGE_REQUEST_LABELS =~ /.*branch::commercial::match.*/"
  when: never

.rule_deployment_branch:
  if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^saas\/\d{4}\/\d{2}$/ || $CI_COMMIT_BRANCH =~ /^saas\/\d{4}\/\d{2}$/'
  variables:
    COMMERCIAL_BRANCH: "${CI_COMMIT_BRANCH}${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
  when: on_success

.rule_exclude_on_deployment_branch:
  if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^saas\/\d{4}\/\d{2}$/ || $CI_COMMIT_BRANCH =~ /^saas\/\d{4}\/\d{2}$/'
  when: never

.rule_exclude_on_protected_tag:
  if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"'
  when: never

.rule_branch_commercial_match_rufus_source:
  if: "$CI_MERGE_REQUEST_LABELS =~ /.*branch::commercial::match.*/ && $CI_MERGE_REQUEST_LABELS =~ /.*branch::rufus::match.*/"
  variables:
    COMMERCIAL_BRANCH: "${CI_COMMIT_BRANCH}${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
  when: on_success

.rule_branch_commercial_match_rufus_trunk:
  if: "$CI_MERGE_REQUEST_LABELS =~ /.*branch::commercial::match.*/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH"
  variables:
    COMMERCIAL_BRANCH: "${CI_COMMIT_BRANCH}${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"

.downstream-job:
  stage: downstream
  needs: []
  variables:
    PLATFORM_BRANCH: "trunk"
  inherit:
    default: false
    variables:
      - PLATFORM_BRANCH
      - CI_COMMIT_TAG
  allow_failure: false

rufus source branch:
  extends: .downstream-job
  rules:
    - !reference [.rules, skip]
    - !reference [.rule_branch_commercial_match_rufus_source]
    - !reference [.rule_branch_rufus_match]
  variables:
    PLATFORM_BRANCH: "${CI_COMMIT_BRANCH}${CI_COMMIT_TAG}${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    MERGE_REF_PATH: "${CI_MERGE_REQUEST_REF_PATH}"
    UPSTREAM_MERGE_REQUEST_LABELS: "${CI_MERGE_REQUEST_LABELS}"
  trigger:
    project: shopware/6/product/rufus
    branch: "${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    strategy: depend

.commercial-downstream-job:
  extends: .downstream-job
  needs: [build image]

commercial source branch:
  extends: .commercial-downstream-job
  rules:
    - !reference [.rules, skip]
    - !reference [.rule_branch_commercial_match]
  variables:
    PLATFORM_BRANCH: "${CI_COMMIT_BRANCH}${CI_COMMIT_TAG}${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    MERGE_REF_PATH: "${CI_MERGE_REQUEST_REF_PATH}"
    UPSTREAM_MERGE_REQUEST_LABELS: "${CI_MERGE_REQUEST_LABELS}"
    PLATFORM_BASE_IMAGE: "${CI_REGISTRY_IMAGE}/ci-e2e:$CI_PIPELINE_ID"
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    project: shopware/6/product/commercial
    branch: "${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    strategy: depend

rufus target branch:
  extends: .downstream-job
  rules:
    - !reference [.rules, skip]
    - !reference [.rule_exclude_on_branch_rufus_match]
    - !reference [.rule_deployment_branch]
  variables:
    PLATFORM_BRANCH: "${CI_COMMIT_BRANCH}${CI_COMMIT_TAG}${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
    MERGE_REF_PATH: "${CI_MERGE_REQUEST_REF_PATH}"
    UPSTREAM_MERGE_REQUEST_LABELS: "${CI_MERGE_REQUEST_LABELS}"
    PLUGIN_DEPENDENCIES: >
      [
        { "name": "SwagCommercial", "package": "shopware/commercial", "url": "gitlab.shopware.com/shopware/6/product/commercial", "branch": "${CI_COMMIT_BRANCH}${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}" }
      ]
  trigger:
    project: shopware/6/product/rufus
    branch: "${CI_COMMIT_BRANCH}${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
    strategy: depend

commercial target branch:
  extends: .commercial-downstream-job
  rules:
    - !reference [.rules, skip]
    - !reference [.rule_exclude_on_branch_commercial_match]
    - !reference [.rule_deployment_branch]
  variables:
    PLATFORM_BRANCH: "${CI_COMMIT_BRANCH}${CI_COMMIT_TAG}${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
    MERGE_REF_PATH: "${CI_MERGE_REQUEST_REF_PATH}"
    UPSTREAM_MERGE_REQUEST_LABELS: "${CI_MERGE_REQUEST_LABELS}"
    PLATFORM_BASE_IMAGE: "${CI_REGISTRY_IMAGE}/ci-e2e:$CI_PIPELINE_ID"
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    project: shopware/6/product/commercial
    branch: "${CI_COMMIT_BRANCH}${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}"
    strategy: depend

rufus trunk:
  extends: .downstream-job
  rules:
    - !reference [.rules, skip]
    - !reference [.rule_exclude_on_branch_rufus_match]
    - !reference [.rule_exclude_on_deployment_branch]
    - !reference [.rule_exclude_on_protected_tag]
    - !reference [.rule_branch_commercial_match_rufus_trunk]
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'
    - if: "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH && ($CI_MERGE_REQUEST_EVENT_TYPE == 'merged_result' || $CI_MERGE_REQUEST_EVENT_TYPE == 'merge_train')"
      variables:
        # only set this if it's a merged result pipeline or merge_train. Otherwise it will use the latest merged_result state, which will be an old state of the branch
        MERGE_REF_PATH: "${CI_MERGE_REQUEST_REF_PATH}"
    - if: "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH"
    - when: manual
      allow_failure: true
  variables:
    PLATFORM_BRANCH: "${CI_COMMIT_BRANCH}${CI_COMMIT_TAG}${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    UPSTREAM_MERGE_REQUEST_LABELS: "${CI_MERGE_REQUEST_LABELS}"
  trigger:
    project: shopware/6/product/rufus
    strategy: depend

commercial trunk:
  extends: .commercial-downstream-job
  rules:
    - !reference [.rules, skip]
    - !reference [.rule_exclude_on_branch_commercial_match]
    - !reference [.rule_exclude_on_deployment_branch]
    - !reference [.rule_exclude_on_protected_tag]
    - if: '$CI_PIPELINE_SOURCE != "merge_request_event"'
    - if: "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH && ($CI_MERGE_REQUEST_EVENT_TYPE == 'merged_result' || $CI_MERGE_REQUEST_EVENT_TYPE == 'merge_train')"
      variables:
        # only set this if it's a merged result pipeline or merge_train. Otherwise it will use the latest merged_result state, which will be an old state of the branch
        MERGE_REF_PATH: "${CI_MERGE_REQUEST_REF_PATH}"
    - if: "$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH"
    - when: manual
      allow_failure: true
  variables:
    PLATFORM_BRANCH: "${CI_COMMIT_BRANCH}${CI_COMMIT_TAG}${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}"
    UPSTREAM_MERGE_REQUEST_LABELS: "${CI_MERGE_REQUEST_LABELS}"
    PLATFORM_BASE_IMAGE: "${CI_REGISTRY_IMAGE}/ci-e2e:$CI_PIPELINE_ID"
    PARENT_PIPELINE_ID: $CI_PIPELINE_ID
  trigger:
    project: shopware/6/product/commercial
    strategy: depend

commercial tag:
  extends: .downstream-job
  needs: [Prepare commercial release]
  rules:
    - if: '$CI_COMMIT_TAG && $CI_COMMIT_REF_PROTECTED == "true"'
      when: manual
  variables:
    PLATFORM_BRANCH: "$CI_COMMIT_TAG"
  trigger:
    project: shopware/6/product/commercial
    strategy: depend
    branch: $CI_COMMIT_TAG

.extensions:
  extends: .downstream-job
  needs: []
  rules:
    - !reference [.rules, skip]
    - !reference [.rules, scheduled]
  allow_failure: true
  trigger:
    project: $PLUGIN_PROJECT
    strategy: depend
    branch: $PLUGIN_BRANCH

extensions-saas:
  extends: .extensions
  parallel:
    matrix:
      - PLUGIN_BRANCH: trunk
        PLUGIN_PROJECT:
          - shopware/6/services/swagdynamicaccess
          - shopware/6/services/paypal
          - shopware/6/services/migration-assistant
      - PLUGIN_BRANCH: master
        PLUGIN_PROJECT:
          - shopware/6/enterprise/publisher
          - shopware/6/services/customized-product
          - shopware/6/services/cms-extensions
          - shopware/6/services/swagsocialshopping

extensions:
  extends: .extensions
  parallel:
    matrix:
      - PLUGIN_BRANCH: trunk
        PLUGIN_PROJECT:
          - shopware/6/services/swagdigitalsalesrooms
