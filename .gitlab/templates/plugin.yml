# this is a CI/CD template for shopware plugins
# - SwagPluginTemplate: https://gitlab.shopware.com/shopware/6/templates/swagplugintemplate/-/blob/trunk/.gitlab-ci.yml
# - gitlab docs: https://docs.gitlab.com/ee/ci/yaml/#include

stages:
    - build
    - test
    - E2E
    - visual
    - deploy

variables:
    PROJECT_ROOT: ${CI_PROJECT_DIR}
    WEB_DOCUMENT_ROOT: $CI_PROJECT_DIR/public
    LOG_STDOUT: $CI_PROJECT_DIR/var/log/stdout.log
    MYSQL_ROOT_PASSWORD: root
    GIT_STRATEGY: clone
    # cypress
    CYPRESS_baseUrl: 'http://localhost:8000'
    CYPRESS_localUsage: 1
    CYPRESS_shopwareRoot: $CI_PROJECT_DIR
    SHOPWARE_HTTP_CACHE_ENABLED: 0
    CYPRESS_screenshotsFolder: $CI_PROJECT_DIR/var/log/screenshots
    # percy
    PERCY_TARGET_BRANCH: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    PERCY_TARGET_COMMIT: $CI_MERGE_REQUEST_DIFF_BASE_SHA
    PERCY_BRANCH: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    PERCY_COMMIT: $CI_COMMIT_SHA
    # things plugins might want to override
    PLUGIN_NAME:
        value: ${CI_PROJECT_TITLE}
        description: 'Plugin name. Default is ${CI_PROJECT_TITLE}'
    PLATFORM_BRANCH:
        value: trunk
        description: 'The shopware/platform branch that is used'
    DEV_IMAGE:
        value: shopware/development:7.4-composer-2
        description: 'base docker image used. Can be changed to test other php versions. Example: shopware/development:8.0-composer-2'
    PLUGIN_SOURCE_DIR:
        value: src/
        description: 'Defines the src dir. Use "" (empty string) if it starts in the root dir.'
    MYSQL_IMAGE:
        value: mysql:5.7
        description: 'database image to use. Possible values: "mysql:8.0.19" (also change $MYSQL_CMD!), "mariadb:10.3", "mariadb:10.4"'
    MYSQL_CMD:
        value: mysqld
        description: 'Copy from $MYSQL8_CMD for mysql >= 8'
    MYSQL8_CMD:
        value: 'mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password --sql-require-primary-key=ON'
        description: 'mysql 8 needs a special auth option to work with shopware/platform'
    BROWSER:
        value: chrome
        description: 'Browser to use for cypress and percy tests. Possible values: "chrome", "firefox", "electron"'


workflow:
    rules:
        # do not run on push
        -   if: '$CI_PIPELINE_SOURCE == "push"'
            when: never
        -   when: always

default:
    image: $DEV_IMAGE
    services:
        - name: mysql:5.7
          alias: database
          entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL_CMD" ]
    before_script:
        - export PLUGIN_NAME="${PLUGIN_NAME:-${CI_PROJECT_TITLE}}"
        - echo "$PLUGIN_NAME"
        - zip -rq plugin.zip .
        - mv plugin.zip /tmp/plugin.zip
        - rm -Rf .* * || true
        - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git . --branch $PLATFORM_BRANCH
        - mkdir -p custom/plugins || true
        - unzip -q /tmp/plugin.zip -d custom/plugins/$PLUGIN_NAME
        - composer install --quiet
        - mkdir -p config/jwt || true
        - bin/console system:generate-jwt || true
        - bin/console system:install --drop-database --basic-setup --force >/dev/null
        - chown -R 1000:1000 .
        - bin/console plugin:refresh
        - bin/console plugin:install --activate $PLUGIN_NAME
        - >
          if bin/console debug:container --parameter kernel.plugin_infos --format json | grep -q "$PLUGIN_NAME";
            then echo "$PLUGIN_NAME is active";
            else echo "$PLUGIN_NAME is not active"; exit 1;
          fi
        - bin/console bundle:dump
        - bin/console assets:install
        - /entrypoint supervisord > /dev/null 2>&1 &
        - cd custom/plugins/$PLUGIN_NAME

.build-js: &build-js
    -  $CI_PROJECT_DIR/bin/console bundle:dump
    - '(cd $CI_PROJECT_DIR/src/Administration/Resources/app/administration/ && npm ci && npm run build)'
    - '(cd $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront/ && npm ci && npm run production && node copy-to-vendor.js)'
    -  $CI_PROJECT_DIR/bin/console assets:install

.install-dev-tools: &install-dev-tools
    - >
        composer config repo.platform-packages --json '{"type": "path", "url": "../../../src/*", "canonical": true}';
    - composer require 'shopware/core:6.4.*@dev' 'shopware/storefront:6.4.*@dev' 'shopware/administration:6.4.*@dev' 'shopware/elasticsearch:6.4.*@dev'

build zip:
    stage: build
    image:
        name: ghcr.io/friendsofshopware/platform-plugin-dev:v6.4.4
        entrypoint: [""]
    rules:
        - exists:
              - composer.json
    variables:
        ADMIN_PATH: $CI_PROJECT_DIR/src/Administration/Resources/app/administration
        STOREFRONT_PATH: $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront
    script:
        - (cd ${PLUGIN_SOURCE_DIR}Resources/app/administration && npm ci) || true
        - (cd ${PLUGIN_SOURCE_DIR}Resources/app/storefront && npm ci) || true
        - *build-js
        - rm -rf "Resources/app/administration/node_modules" || true
        - rm -rf "Resources/app/storefront/node_modules" || true
        - rm -rf vendor composer.lock || true
        - cd $CI_PROJECT_DIR/custom/plugins/$PLUGIN_NAME
        - plugin-uploader ext:zip --strategy=plain -- "$PWD"
        - '[[ -r $PLUGIN_NAME.zip ]] || (echo "failed to create $PLUGIN_NAME.zip. Please run ./bin/init $PLUGIN_NAME" && exit 1)'
        - mv $PLUGIN_NAME.zip ${CI_PROJECT_DIR}/$PLUGIN_NAME.zip
    artifacts:
        name: '${CI_PROJECT_TITLE}.zip'
        paths:
            - '*.zip'

validate zip:
    stage: test
    image:
        name: ghcr.io/friendsofshopware/platform-plugin-dev:v6.4.1
        entrypoint: [""]
    variables:
        GIT_STRATEGY: none
    needs:
        - build zip
    rules:
        - exists:
              - composer.json
          if: '$CI_PROJECT_TITLE != "SwagPluginTemplate"'
    before_script: []
    script:
        - export PLUGIN_NAME="${PLUGIN_NAME:-${CI_PROJECT_TITLE}}"
        - plugin-uploader ext:validate $PWD/$PLUGIN_NAME.zip

phpunit:
    stage: test
    needs: []
    rules:
        - exists:
              - phpunit.xml*
    script:
        - *install-dev-tools
        - php
            -d pcov.enabled=1 -d pcov.directory=$PWD/src -d pcov.exclude='~(vendor|tests|node_modules)~'
            vendor/bin/phpunit
            --configuration phpunit.xml.dist
            --log-junit ${CI_PROJECT_DIR}/phpunit.junit.xml
            --colors=never
            --coverage-cobertura ${CI_PROJECT_DIR}/cobertura.xml
            --coverage-text | sed -E -n '1,/^\s*Lines:\s*([0-9]+(\.[0-9]+)?)%/ p' # do not output covered files lines
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
        when: always
        reports:
            junit: phpunit.junit.xml
            cobertura: cobertura.xml

phpstan:
    stage: test
    needs: []
    rules:
        - exists:
              - phpstan.neon*
    script:
        - *install-dev-tools
        - php vendor/shopware/core/DevOps/StaticAnalyze/PHPStan/phpstan-bootstrap.php
        - vendor/bin/phpstan analyze --error-format=gitlab --no-progress | tee ${CI_PROJECT_DIR}/phpstan-report.json
    artifacts:
        when: always
        reports:
            codequality: phpstan-report.json

psalm:
    stage: test
    needs: []
    rules:
        - exists:
              - psalm.xml*
    script:
        - *install-dev-tools
        - vendor/bin/psalm --threads=$(nproc) --diff --show-info=false --report=${CI_PROJECT_DIR}/junit.xml
    artifacts:
        when: always
        reports:
            junit: junit.xml

ecs:
    stage: test
    needs: []
    rules:
        - exists:
              - ecs.php
    script:
        - *install-dev-tools
        - vendor/bin/ecs

validate snippets:
    stage: test
    needs: []
    rules:
        - changes:
              - '**/*.json'
    script:
        - ${PROJECT_ROOT}/bin/console snippets:validate

jest (administration):
    stage: test
    needs: []
    rules:
        # exists does not support variables, so we cannot use ${PLUGIN_SOURCE_DIR} here
        - exists:
              - src/Resources/app/administration/jest.config.js
              - Resources/app/administration/jest.config.js
    variables:
        ADMIN_PATH: $CI_PROJECT_DIR/src/Administration/Resources/app/administration
        STOREFRONT_PATH: $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront
    script:
        - '(cd $ADMIN_PATH && npm ci)'
        - cd ${PLUGIN_SOURCE_DIR}Resources/app/administration/
        - npm ci
        - '$(npm bin)/jest --config jest.config.js --ci'
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'

jest (storefront):
    stage: test
    needs: []
    rules:
        # exists does not support variables, so we cannot use ${PLUGIN_SOURCE_DIR} here
        - exists:
              - Resources/app/storefront/jest.config.js
              - src/Resources/app/storefront/jest.config.js
    variables:
        ADMIN_PATH: $CI_PROJECT_DIR/src/Administration/Resources/app/administration
        STOREFRONT_PATH: $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront
    script:
        - *build-js
        - cd ${PLUGIN_SOURCE_DIR}Resources/app/storefront/
        - npm ci
        - '$(npm bin)/jest --config jest.config.js --ci'
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'

template filled:
    stage: test
    image: bash
    needs: []
    rules:
        - exists:
              - TEMPLATE
          if: $CI_PROJECT_TITLE != "SwagPluginTemplate"
    before_script: []
    script:
        - echo "run './bin/init $CI_PROJECT_TITLE'"
        - exit 1

.e2e-prepare: &e2e-prepare
    - *build-js
    - $CI_PROJECT_DIR/bin/console theme:compile
    - $CI_PROJECT_DIR/bin/console theme:change --all Storefront
    - $CI_PROJECT_DIR/bin/console assets:install
    - $CI_PROJECT_DIR/bin/console e2e:dump-db
    - cd ${PLUGIN_SOURCE_DIR}${E2E_PROJECT_PATH}
    - npm ci

.base e2e:
    stage: E2E
    needs: []
    script:
        - *e2e-prepare
        - ./node_modules/.bin/cypress run --browser $BROWSER --headless --env grep=visual,invert=1
    after_script:
        - export PLUGIN_NAME="${PLUGIN_NAME:-${CI_PROJECT_TITLE}}"
        - cd custom/plugins/$PLUGIN_NAME/${PLUGIN_SOURCE_DIR}${E2E_PROJECT_PATH}
        - mkdir $CI_PROJECT_DIR/var/log/e2e || true
        - mkdir -p cypress/mochareports || true
        - npx mochawesome-merge cypress/results/mocha/*.json > cypress/mochareports/report.json
        - npx marge cypress/mochareports/*.json -f report -o mochareports
        - mv cypress/results/single-reports/*.xml $CI_PROJECT_DIR/var/log/e2e/ || true
        - mv mochareports/ $CI_PROJECT_DIR/var/log/e2e/ || true
    artifacts:
        when: always
        paths:
            - var/log/*
        reports:
            junit: var/log/e2e/*.xml

cypress admin:
    extends: .base e2e
    variables:
        E2E_PROJECT_PATH: Resources/app/administration/test/e2e/
        APP_ENV: e2e
    rules:
        -   exists:
                - Resources/app/administration/test/e2e/cypress.json
                - src/Resources/app/administration/test/e2e/cypress.json

cypress storefront:
    extends: .base e2e
    variables:
        E2E_PROJECT_PATH: Resources/app/storefront/test/e2e/
        APP_ENV: e2e
    rules:
        -   exists:
                - Resources/app/storefront/test/e2e/cypress.json
                - src/Resources/app/storefront/test/e2e/cypress.json

percy admin:
    extends: cypress admin
    stage: visual
    rules:
        -   if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"'
            when: never
        -   exists:
                - Resources/app/administration/test/e2e/.percy*
                - src/Resources/app/administration/test/e2e/.percy*
            if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_MERGE_REQUEST_LABELS =~ /.*visual::all.*/'
        -   exists:
                - Resources/app/storefront/test/e2e/.percy*
                - src/Resources/app/storefront/test/e2e/.percy*
            when: manual
            allow_failure: true
    script:
        - *e2e-prepare
        - ./node_modules/.bin/percy exec -- ./node_modules/.bin/cypress run
                --browser $BROWSER
                --headless
                --env grep=visual

percy storefront:
    extends: cypress storefront
    stage: visual
    rules:
        -   if: '$CI_MERGE_REQUEST_EVENT_TYPE == "merge_train"'
            when: never
        -   exists:
                - Resources/app/storefront/test/e2e/.percy*
                - src/Resources/app/storefront/test/e2e/.percy*
            if: '$CI_PIPELINE_SOURCE == "schedule" || $CI_MERGE_REQUEST_LABELS =~ /.*visual::all.*/'
        -   exists:
                - Resources/app/storefront/test/e2e/.percy*
                - src/Resources/app/storefront/test/e2e/.percy*
            when: manual
            allow_failure: true
    script:
        - *e2e-prepare
        - ./node_modules/.bin/percy exec -- ./node_modules/.bin/cypress run
            --browser $BROWSER
            --headless
            --env grep=visual

upload zip to store:
    stage: deploy
    environment:
        name: account.shopware.com
        url: 'https://account.shopware.com'
    image:
        name: ghcr.io/friendsofshopware/platform-plugin-dev:v6.4.4
        entrypoint: [""]
    variables:
        GIT_STRATEGY: none
    needs:
        - build zip
    rules:
        - exists:
              - composer.json
          if: '$ACCOUNT_USER && $ACCOUNT_PASSWORD && $CI_PROJECT_TITLE != "SwagPluginTemplate"'
          when: manual
    before_script: []
    script:
        - export PLUGIN_NAME="${PLUGIN_NAME:-${CI_PROJECT_TITLE}}"
        - plugin-uploader ext:upload "$(realpath "$PLUGIN_NAME.zip")"
