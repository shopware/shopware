# this is a CI/CD template for shopware plugins
# - SwagPluginTemplate: https://gitlab.shopware.com/shopware/6/templates/swagplugintemplate/-/blob/trunk/.gitlab-ci.yml
# - gitlab docs: https://docs.gitlab.com/ee/ci/yaml/#include

stages:
    - build
    - test
    - E2E
    - visual
    - deploy

variables:
    GIT_STRATEGY: fetch
    PROJECT_ROOT: ${CI_PROJECT_DIR}
    WEB_DOCUMENT_ROOT: $CI_PROJECT_DIR/public
    LOG_STDOUT: $CI_PROJECT_DIR/var/log/stdout.log
    MYSQL_ROOT_PASSWORD: root
    DATABASE_URL: 'mysql://root:root@database:3306/root'
    APP_SECRET: 'devsecret'
    APP_URL: http://localhost:8000
    APP_ENV: test
    # cypress
    CYPRESS_baseUrl: http://localhost:8000
    CYPRESS_localUsage: 1
    CYPRESS_shopwareRoot: $CI_PROJECT_DIR
    SHOPWARE_HTTP_CACHE_ENABLED: 0
    CYPRESS_screenshotsFolder: $CI_PROJECT_DIR/var/log/screenshots
    # things plugins might want to override
    PLUGIN_NAME:
        value: ${CI_PROJECT_TITLE}
        description: 'Plugin name. Default is ${CI_PROJECT_TITLE}'
    PLATFORM_BRANCH:
        value: trunk
        description: 'The shopware/platform branch that is used'
    DEV_IMAGE:
        value: ${CI_REGISTRY}/infrastructure/docker-base/ci-build:latest
        description: 'base docker image used. Can be changed to test other php versions. Example: shopware/development:8.0-composer-2'
    PLUGIN_SOURCE_DIR:
        value: src/
        description: 'Defines the src dir. Use "" (empty string) if it starts in the root dir.'
    MYSQL_IMAGE:
        value: mysql:8.0
        description: 'database image to use. Possible values: "mysql:8.0.19" (also change $MYSQL_CMD!), "mariadb:10.11", "mariadb:11.0"'
    MYSQL_CMD:
        value: mysqld
        description: 'Copy from $MYSQL8_CMD for mysql >= 8'
    MYSQL8_CMD:
        value: 'mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password --sql-require-primary-key=ON'
        description: 'mysql 8 needs a special auth option to work with shopware/platform'
    BROWSER:
        value: chrome
        description: 'Browser to use for cypress tests. Possible values: "chrome", "firefox", "electron"'
    STOREFRONT_CYPRESS_SPEC:
        value: ''
        description: 'Can be used instead of the tagging to define which storefront spec files should be used. Example: "cypress/integration/content/**/*,cypress/integration/catalogue/**/*"'
    ADMIN_CYPRESS_SPEC:
        value: ''
        description: 'Can be used instead of the tagging to define which storefront spec files should be used. Example: "cypress/integration/content/**/*,cypress/integration/catalogue/**/*"'
    PLUGIN_DEPENDENCIES:
        value: '[]'
        description: 'Plugin dependencies. Defined in json. Example: [{ "name": "SwagPayPal", "url": "gitlab.shopware.com/shopware/6/services/paypal", "branch": "master" }]'
    COMPOSER_DEPENDENCIES:
        value: '[]'
        description: 'Additional composer dependencies. Defined in json. Example: ["theiconic/name-parser", "amzn/amazon-pay-api-sdk-php:2.2.1"]'

workflow:
    rules:
        # do not run on push
        -   if: '$CI_PIPELINE_SOURCE == "push"'
            when: never
        -   if: '$CI_MERGE_REQUEST_LABELS =~ /.*branch::platform::match.*/'
            variables:
              PLATFORM_BRANCH: ${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
        -   when: always

.rules:
  skip:
    if: '$CI_MERGE_REQUEST_EVENT_TYPE != "merge_train" && $UPSTREAM_MERGE_REQUEST_EVENT_TYPE != "merge_train" && (
        ($CI_MERGE_REQUEST_LABELS =~ /.*lint::skip.*/ || $UPSTREAM_MERGE_REQUEST_LABELS =~ /.*downstream::lint::skip.*/) && $CI_JOB_STAGE == "lint"
        || ($CI_MERGE_REQUEST_LABELS =~ /.*test::skip.*/ || $UPSTREAM_MERGE_REQUEST_LABELS =~ /.*downstream::test::skip.*/) && $CI_JOB_STAGE == "test"
        || ($CI_MERGE_REQUEST_LABELS =~ /.*E2E::skip.*/ || $UPSTREAM_MERGE_REQUEST_LABELS =~ /.*downstream::E2E::skip.*/) && $CI_JOB_STAGE == "E2E"
        || ($CI_MERGE_REQUEST_LABELS =~ /.*visual::skip.*/ || $UPSTREAM_MERGE_REQUEST_LABELS =~ /.*downstream::visual::skip.*/) && $CI_JOB_STAGE == "visual")'
    when: never
  run:
    if: '($CI_MERGE_REQUEST_LABELS =~ /.*lint::all.*/ || $UPSTREAM_MERGE_REQUEST_LABELS =~ /.*downstream::lint::all.*/) && $CI_JOB_STAGE == "lint"
        || ($CI_MERGE_REQUEST_LABELS =~ /.*test::all.*/ || $UPSTREAM_MERGE_REQUEST_LABELS =~ /.*downstream::test::all.*/) && $CI_JOB_STAGE == "test"
        || ($CI_MERGE_REQUEST_LABELS =~ /.*E2E::all.*/ || $UPSTREAM_MERGE_REQUEST_LABELS =~ /.*downstream::E2E::all.*/) && $CI_JOB_STAGE == "E2E"
        || ($CI_MERGE_REQUEST_LABELS =~ /.*visual::all.*/ || $UPSTREAM_MERGE_REQUEST_LABELS =~ /.*downstream::visual::all.*/) && $CI_JOB_STAGE == "visual"'

.setup_platform_and_plugin_files: &setup_platform_and_plugin_files
  - tar -czf /tmp/plugin.tar.gz .
  - rm -Rf .* * || true
  - echo "Checkout platform branch $PLATFORM_BRANCH"
  - git clone --depth=1 https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git . --branch $PLATFORM_BRANCH
  - >
      if ! [[ -z "${MERGE_REF_PATH}" ]]; then
        echo '$MERGE_REF_PATH is set, checking out merged result'
        git config remote.origin.fetch '+refs/merge-requests/*:refs/merge-requests/*'
        git fetch origin ${MERGE_REF_PATH::-4}merge
        echo "Checking out ${MERGE_REF_PATH::-4}merge"
        git checkout ${MERGE_REF_PATH::-4}merge
      fi
  - LATEST_TAG="$(git -c 'versionsort.suffix=-' ls-remote --exit-code --refs --sort='version:refname' --tags | tail --lines=1 | cut --delimiter='/' --fields=3)"
  - PLATFORM_VERSION="${LATEST_TAG#"v"}"
  - composer config version "$PLATFORM_VERSION"
  - composer update
  - mkdir -p "custom/plugins/${PLUGIN_NAME}" || true
  - tar -xzf /tmp/plugin.tar.gz --directory="custom/plugins/${PLUGIN_NAME}"

.install_composer_dependencies: &install_composer_dependencies
  - apt-get update && apt-get install -y jq
  - |
    echo "${COMPOSER_DEPENDENCIES}"
    for package in $(echo "${COMPOSER_DEPENDENCIES}" | jq -r '.[]'); do
        composer require "${package}"
    done

.install_dependencies: &install_dependencies
  - apt-get update && apt-get install -y jq
  - |
    echo "${PLUGIN_DEPENDENCIES}"
    for plugin64 in $(echo "${PLUGIN_DEPENDENCIES}" | jq -r '.[] | @base64'); do
        plugin="$(echo $plugin64 | base64 -d)"
        plugin_name="$(echo "$plugin" | jq -r .name)"
        plugin_url="$(echo "$plugin" | jq -r .url)"
        plugin_branch="$(echo "$plugin" | jq -r .branch)"
        git clone --depth=1 "https://gitlab-ci-token:${CI_JOB_TOKEN}@${plugin_url}" --branch "${plugin_branch}" "${PROJECT_ROOT}/custom/plugins/${plugin_name}"
        npm ci --no-audit --prefer-offline --prefix  "${PROJECT_ROOT}/custom/plugins/${plugin_name}/Resources/app/administration" || true
        npm ci --no-audit --prefer-offline --prefix  "${PROJECT_ROOT}/custom/plugins/${plugin_name}/src/Resources/app/administration" || true
        npm ci --no-audit --prefer-offline --prefix  "${PROJECT_ROOT}/custom/plugins/${plugin_name}/Resources/app/storefront" || true
        npm ci --no-audit --prefer-offline --prefix  "${PROJECT_ROOT}/custom/plugins/${plugin_name}/src/Resources/app/storefront" || true
        composer -d "${PROJECT_ROOT}/custom/plugins/${plugin_name}" dump-autoload || true
    done
  - bin/console plugin:refresh
  - |
    for plugin64 in $(echo "${PLUGIN_DEPENDENCIES}" | jq -r '.[] | @base64'); do
        plugin="$(echo $plugin64 | base64 -d)"
        plugin_name="$(echo "$plugin" | jq -r .name)"
        bin/console plugin:install --activate "${plugin_name}"
    done
  - bin/console cache:clear
  - bin/console plugin:list

default:
    image: $DEV_IMAGE
    tags:
      - shopware
    services:
        - name: "$MYSQL_IMAGE"
          alias: database
          entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL8_CMD" ]
    before_script:
        - echo 'memory_limit = -1' | tee /usr/local/etc/php/conf.d/99-memory-limit.ini
        - export PLUGIN_NAME="${PLUGIN_NAME:-${CI_PROJECT_TITLE}}"
        - echo "$PLUGIN_NAME"
        - *setup_platform_and_plugin_files
        - composer install --no-interaction
        - *install_composer_dependencies
        - mkdir -p config/jwt || true
        - bin/console system:generate-jwt || true
        - bin/console system:install --drop-database --basic-setup --force >/dev/null
        - bin/console plugin:refresh
        - *install_dependencies
        - bin/console plugin:install --activate $PLUGIN_NAME
        - >
          if bin/console debug:container --parameter kernel.plugin_infos --format json | grep -q "$PLUGIN_NAME";
            then echo "$PLUGIN_NAME is active";
            else echo "$PLUGIN_NAME is not active"; exit 1;
          fi
        - bin/console bundle:dump
        - bin/console assets:install
        # run php as root to prevent permission issues
        - SERVICE_PHPFPM_OPTS=--allow-to-run-as-root CONTAINER_UID=root /entrypoint supervisord > /dev/null 2>&1 &
        - cd custom/plugins/$PLUGIN_NAME
        - composer dump-autoload
        - mkdir -p vendor/shopware
        - ln -s $PROJECT_ROOT/src/Core vendor/shopware/core
        - ln -s $PROJECT_ROOT/src/Storefront vendor/shopware/storefront
        - rm /usr/local/etc/php/conf.d/99-memory-limit.ini

.build-js: &build-js
    - $CI_PROJECT_DIR/bin/console bundle:dump
    - $CI_PROJECT_DIR/bin/console framework:schema -s 'entity-schema' $CI_PROJECT_DIR/src/Administration/Resources/app/administration/test/_mocks_/entity-schema.json
    - $CI_PROJECT_DIR/bin/install-extension-npm
    - '(cd $CI_PROJECT_DIR/src/Administration/Resources/app/administration/ && npm ci --no-audit --prefer-offline && npm run build)'
    - '(cd $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront/ && npm ci --no-audit --prefer-offline && npm run production && node copy-to-vendor.js)'
    - $CI_PROJECT_DIR/bin/console assets:install

build and validate zip:
    stage: build
    image:
        name: ghcr.io/friendsofshopware/shopware-cli:0.3.13
        entrypoint: [ "/usr/local/bin/entrypoint.sh" ]
    rules:
        - exists:
              - composer.json
    variables:
        SHOPWARE_PROJECT_ROOT: "${CI_PROJECT_DIR}"
        APP_ENV: 'dev'
    before_script:
      - *setup_platform_and_plugin_files
    script:
        - shopware-cli extension zip "${CI_PROJECT_DIR}/custom/plugins/${PLUGIN_NAME}" --git-commit "${CI_COMMIT_SHA}"
        - mv ${PLUGIN_NAME}-${CI_COMMIT_SHA}.zip ${PLUGIN_NAME}.zip
        - shopware-cli extension validate "${PLUGIN_NAME}.zip"
    artifacts:
        name: '${PLUGIN_NAME}.zip'
        paths:
            - '${PLUGIN_NAME}.zip'

phpunit:
    stage: test
    needs: []
    rules:
        - exists:
              - phpunit.xml*
    script:
        - php
            -d pcov.enabled=1 -d pcov.directory=$PWD/src -d pcov.exclude='~(vendor|tests|node_modules)~'
            ${PROJECT_ROOT}/vendor/bin/phpunit
            --configuration phpunit.xml.dist
            --log-junit ${CI_PROJECT_DIR}/phpunit.junit.xml
            --colors=never
            --coverage-cobertura ${CI_PROJECT_DIR}/cobertura.xml
            --coverage-text | grep -v -E '^Shopware\\|^  Methods:' # do not output covered files lines
    coverage: '/^\s*Lines:\s*(\d+(?:\.\d+)?%)/'
    artifacts:
        when: always
        reports:
            junit: phpunit.junit.xml
            coverage_report:
                coverage_format: cobertura
                path: cobertura.xml

phpstan:
    stage: test
    needs: []
    rules:
        - exists:
              - phpstan.neon*
    script:
        - composer dump-autoload
        - >
          if [[ -r tests/TestBootstrap.php ]]; then
              php tests/TestBootstrap.php
          fi
        - php ${PROJECT_ROOT}/src/Core/DevOps/StaticAnalyze/phpstan-bootstrap.php
        - ${PROJECT_ROOT}/vendor/bin/phpstan analyze --error-format=gitlab --no-progress | tee ${CI_PROJECT_DIR}/phpstan-report.json
    artifacts:
        when: always
        reports:
            codequality: phpstan-report.json

ecs:
    stage: test
    needs: []
    rules:
        - if: '$CI_PIPELINE_SOURCE == "pipeline"'
          when: never
        - exists:
              - ecs.php
    script:
        - ${PROJECT_ROOT}/vendor/bin/ecs

validate snippets:
    stage: test
    needs: []
    rules:
        - if: '$CI_PIPELINE_SOURCE == "pipeline"'
          when: never
        - changes:
              - '**/*.json'
    script:
        - ${PROJECT_ROOT}/bin/console snippets:validate

jest (administration):
    stage: test
    needs: []
    rules:
        # exists does not support variables, so we cannot use ${PLUGIN_SOURCE_DIR} here
        - exists:
              - src/Resources/app/administration/jest.config.js
              - Resources/app/administration/jest.config.js
    variables:
        APP_ENV: prod
        ADMIN_PATH: $CI_PROJECT_DIR/src/Administration/Resources/app/administration
        STOREFRONT_PATH: $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront
    script:
        - '(cd $ADMIN_PATH && npm ci)'
        - $CI_PROJECT_DIR/bin/console framework:schema -s 'entity-schema' $ADMIN_PATH/test/_mocks_/entity-schema.json
        - cd ${PLUGIN_SOURCE_DIR}Resources/app/administration/
        - npm ci --no-audit --prefer-offline
        - npm exec jest -- --config jest.config.js --ci
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'

jest (administration vue3):
    stage: test
    needs: []
    rules:
        # exists does not support variables, so we cannot use ${PLUGIN_SOURCE_DIR} here
        - exists:
              - src/Resources/app/administration/jest.vue3.config.js
              - Resources/app/administration/jest.vue3.config.js
    variables:
        APP_ENV: prod
        ADMIN_PATH: $CI_PROJECT_DIR/src/Administration/Resources/app/administration
        STOREFRONT_PATH: $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront
    script:
        - '(cd $ADMIN_PATH && npm ci)'
        - $CI_PROJECT_DIR/bin/console framework:schema -s 'entity-schema' $ADMIN_PATH/test/_mocks_/entity-schema.json
        - npm --prefix $ADMIN_PATH run unit-setup
        - cd ${PLUGIN_SOURCE_DIR}Resources/app/administration/
        - npm ci --no-audit --prefer-offline
        - VUE3=1 npm exec jest -- --config jest.vue3.config.js --ci

jest (storefront):
    stage: test
    needs: []
    rules:
        # exists does not support variables, so we cannot use ${PLUGIN_SOURCE_DIR} here
        - exists:
              - Resources/app/storefront/jest.config.js
              - src/Resources/app/storefront/jest.config.js
    variables:
        APP_ENV: prod
        ADMIN_PATH: $CI_PROJECT_DIR/src/Administration/Resources/app/administration
        STOREFRONT_PATH: $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront
    script:
        - *build-js
        - cd ${PLUGIN_SOURCE_DIR}Resources/app/storefront/
        - npm ci --no-audit --prefer-offline
        - '$(npm bin)/jest --config jest.config.js --ci'
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'

template filled:
    stage: test
    image: bash
    needs: []
    rules:
        - exists:
              - TEMPLATE
          if: $CI_PROJECT_TITLE != "SwagPluginTemplate"
    before_script: []
    script:
        - echo "run './bin/init $CI_PROJECT_TITLE'"
        - exit 1

.e2e-prepare: &e2e-prepare
    - *build-js
    - $CI_PROJECT_DIR/bin/console theme:compile
    - $CI_PROJECT_DIR/bin/console theme:change --all Storefront
    - $CI_PROJECT_DIR/bin/console assets:install
    - APP_ENV=e2e $CI_PROJECT_DIR/bin/console e2e:dump-db
    - cd ${PLUGIN_SOURCE_DIR}${E2E_PROJECT_PATH}
    - npm ci --no-audit --prefer-offline

.base e2e:
    image: shopware/development:8.2-composer-2
    stage: E2E
    needs: []
    script:
        - *e2e-prepare
        - >
          if [[ -z "$CYPRESS_SPEC" ]]; then
              echo "Running non visual tests"
              APP_ENV=e2e ./node_modules/.bin/cypress run --browser $BROWSER --headless --env grep=visual,invert=1
          else
              echo "Running specs: $CYPRESS_SPEC"
              APP_ENV=e2e ./node_modules/.bin/cypress run --browser $BROWSER --headless --spec "$CYPRESS_SPEC"
          fi
    after_script:
        - export PLUGIN_NAME="${PLUGIN_NAME:-${CI_PROJECT_TITLE}}"
        - cd custom/plugins/$PLUGIN_NAME/${PLUGIN_SOURCE_DIR}${E2E_PROJECT_PATH}
        - mkdir $CI_PROJECT_DIR/var/log/e2e || true
        - mkdir -p cypress/mochareports || true
        - npx mochawesome-merge cypress/results/mocha/*.json > cypress/mochareports/report.json
        - npx marge cypress/mochareports/*.json -f report -o mochareports
        - mv cypress/results/single-reports/*.xml $CI_PROJECT_DIR/var/log/e2e/ || true
        - mv mochareports/ $CI_PROJECT_DIR/var/log/e2e/ || true
    artifacts:
        when: always
        paths:
            - var/log/*
        reports:
            junit: var/log/e2e/*.xml

cypress admin:
    extends: .base e2e
    variables:
        E2E_PROJECT_PATH: Resources/app/administration/test/e2e/
        CYPRESS_SPEC: $ADMIN_CYPRESS_SPEC
        APP_ENV: e2e
    rules:
        -   exists:
                - Resources/app/administration/test/e2e/cypress.json
                - Resources/app/administration/test/e2e/cypress.config.js
                - src/Resources/app/administration/test/e2e/cypress.json
                - src/Resources/app/administration/test/e2e/cypress.config.js

cypress storefront:
    extends: .base e2e
    variables:
        E2E_PROJECT_PATH: Resources/app/storefront/test/e2e/
        CYPRESS_SPEC: $STOREFRONT_CYPRESS_SPEC
        APP_ENV: e2e
    rules:
        -   exists:
                - Resources/app/storefront/test/e2e/cypress.json
                - Resources/app/storefront/test/e2e/cypress.config.js
                - src/Resources/app/storefront/test/e2e/cypress.json
                - src/Resources/app/storefront/test/e2e/cypress.config.js

upload zip to store:
    stage: deploy
    allow_failure: true
    environment:
        name: account.shopware.com
        url: 'https://account.shopware.com'
    image:
        name: ghcr.io/friendsofshopware/shopware-cli:0.3.13
        entrypoint: [ "/usr/local/bin/entrypoint.sh" ]
    variables:
        GIT_STRATEGY: none
    needs:
        - build and validate zip
    rules:
        - exists:
              - composer.json
          if: '$ACCOUNT_USER && $ACCOUNT_PASSWORD && $CI_PROJECT_TITLE != "SwagPluginTemplate"'
          when: manual
    before_script: []
    script:
        - export SHOPWARE_CLI_ACCOUNT_EMAIL=${ACCOUNT_USER}
        - export SHOPWARE_CLI_ACCOUNT_PASSWORD=${ACCOUNT_PASSWORD}
        - export PLUGIN_NAME="${PLUGIN_NAME:-${CI_PROJECT_TITLE}}"
        - shopware-cli account producer extension upload $(realpath "$PLUGIN_NAME.zip")
