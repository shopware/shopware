# This is a CI/CD template for shopware themes
# - SwagThemeTemplate: https://gitlab.shopware.com/shopware/6/templates/swagthemetemplate/-/blob/trunk/.gitlab-ci.yml
# - gitlab docs: https://docs.gitlab.com/ee/ci/yaml/#include

stages:
    - build
    - test
    - E2E
    - visual
    - deploy

variables:
    GIT_STRATEGY: clone
    PROJECT_ROOT: ${CI_PROJECT_DIR}
    WEB_DOCUMENT_ROOT: $CI_PROJECT_DIR/public
    LOG_STDOUT: $CI_PROJECT_DIR/var/log/stdout.log
    MYSQL_ROOT_PASSWORD: root
    DATABASE_URL: 'mysql://root:root@database:3306/root'
    APP_SECRET: 'devsecret'
    APP_URL: http://localhost:8000
    # cypress
    CYPRESS_baseUrl: http://localhost:8000
    CYPRESS_localUsage: 1
    CYPRESS_shopwareRoot: $CI_PROJECT_DIR
    SHOPWARE_HTTP_CACHE_ENABLED: 0
    CYPRESS_screenshotsFolder: $CI_PROJECT_DIR/var/log/screenshots
    # things themes might want to override
    THEME_NAME:
        value: ${CI_PROJECT_TITLE}
        description: 'Theme name. Default is ${CI_PROJECT_TITLE}'
    PLATFORM_BRANCH:
        value: trunk
        description: 'The shopware/platform branch that is used'
    DEV_IMAGE:
        value: ${CI_REGISTRY}/infrastructure/docker-base/ci-build:latest
        description: 'base docker image used. Can be changed to test other php versions. Example: shopware/development:8.0-composer-2'
    THEME_SOURCE_DIR:
        value: ''
        description: 'Defines the src dir. Use "" (empty string) if it starts in the root dir.'
    MYSQL_IMAGE:
        value: mysql:8.0
        description: 'database image to use. Possible values: "mysql:8.0.19" (also change $MYSQL_CMD!), "mariadb:10.11", "mariadb:11.0"'
    MYSQL_CMD:
        value: mysqld
        description: 'Copy from $MYSQL8_CMD for mysql >= 8'
    MYSQL8_CMD:
        value: 'mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --default-authentication-plugin=mysql_native_password --sql-require-primary-key=ON'
        description: 'mysql 8 needs a special auth option to work with shopware/platform'
    BROWSER:
        value: chrome
        description: 'Browser to use for cypress tests. Possible values: "chrome", "firefox", "electron"'
    PLUGIN_DEPENDENCIES:
        value: '[]'
        description: 'Plugin dependencies. Defined in json. Example: [{ "name": "SwagPayPal", "url": "gitlab.shopware.com/shopware/6/services/paypal", "branch": "master" }]'
    COMPOSER_DEPENDENCIES:
        value: '[]'
        description: 'Additional composer dependencies. Defined in json. Example: ["theiconic/name-parser", "amzn/amazon-pay-api-sdk-php:2.2.1"]'

workflow:
    rules:
        # do not run on push
        -   if: '$CI_PIPELINE_SOURCE == "push"'
            when: never
        -   when: always

.base_env_vars: &base_env_vars
    - export THEME_NAME="${THEME_NAME:-${CI_PROJECT_TITLE}}"

.base_install: &base_install
    - composer config --global allow-plugins.composer/package-versions-deprecated true
    - composer config --global allow-plugins.bamarni/composer-bin-plugin true
    - composer config --global allow-plugins.phpstan/extension-installer true
    - composer install --quiet --no-interaction
    - mkdir -p config/jwt || true
    - bin/console system:generate-jwt || true
    - bin/console system:install --drop-database --basic-setup --force >/dev/null
    - bin/console bundle:dump
    - 'bin/console feature:dump || true'
    - '(cd src/Administration/Resources/app/administration/ && npm ci && npm run build)'
    - '(cd src/Storefront/Resources/app/storefront/ && npm ci && npm run production && node copy-to-vendor.js)'

.theme_install: &theme_install
    - bin/console app:install --activate $THEME_NAME
    - bin/console cache:clear
    - bin/console theme:change --all $THEME_NAME
    - bin/console assets:install

.theme_build_install: &theme_build_install
    - bin/console app:install --activate $THEME_NAME
    - bin/console cache:clear
    - bin/console bundle:dump
    - cat var/plugins.json
    - '(cd src/Administration/Resources/app/administration/ && npm ci && npm run build)'
    - '(cd src/Storefront/Resources/app/storefront/ && npm ci && npm run production && node copy-to-vendor.js)'
    - bin/console theme:change --all $THEME_NAME
    - bin/console assets:install

.install_dependencies: &install_dependencies
  - apt-get update && apt-get install -y jq
  - |
    echo "${COMPOSER_DEPENDENCIES}"
    for package in $(echo "${COMPOSER_DEPENDENCIES}" | jq -r '.[]'); do
        composer require "${package}"
    done
  - |
    echo "${PLUGIN_DEPENDENCIES}"
    for plugin64 in $(echo "${PLUGIN_DEPENDENCIES}" | jq -r '.[] | @base64'); do
        plugin="$(echo $plugin64 | base64 -d)"
        plugin_name="$(echo "$plugin" | jq -r .name)"
        plugin_url="$(echo "$plugin" | jq -r .url)"
        plugin_branch="$(echo "$plugin" | jq -r .branch)"
        git clone "https://gitlab-ci-token:${CI_JOB_TOKEN}@${plugin_url}" --branch "${plugin_branch}" "${PROJECT_ROOT}/custom/plugins/${plugin_name}"
    done
  - bin/console plugin:refresh
  - |
    for plugin64 in $(echo "${PLUGIN_DEPENDENCIES}" | jq -r '.[] | @base64'); do
        plugin="$(echo $plugin64 | base64 -d)"
        plugin_name="$(echo "$plugin" | jq -r .name)"
        bin/console plugin:install --activate "${plugin_name}"
    done
  - bin/console cache:clear
  - bin/console plugin:list

default:
    image: $DEV_IMAGE
    services:
        - name: mysql:8.0
          alias: database
          entrypoint: [ "sh", "-c", "docker-entrypoint.sh $MYSQL8_CMD" ]
    tags:
      - shopware
    before_script:
        - *base_env_vars
        - zip -rq theme.zip .
        - mv theme.zip /tmp/theme.zip
        - rm -Rf .* * || true
        - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git . --branch $PLATFORM_BRANCH
        - mkdir -p custom/apps || true
        - unzip -q /tmp/theme.zip -d custom/apps/$THEME_NAME
        - *base_install
        - *theme_build_install
        - *install_dependencies
        # run php as root to prevent permission issues
        - SERVICE_PHPFPM_OPTS=--allow-to-run-as-root CONTAINER_UID=root /entrypoint supervisord > /dev/null 2>&1 &
        - cd custom/apps/$THEME_NAME

build zip:
    stage: build
    # Revert after node is fixed in ghcr.io/friendsofshopware/platform-plugin-dev
    allow_failure: true
    image:
        name: ghcr.io/friendsofshopware/platform-plugin-dev:v6.4.13
        entrypoint: [""]
    rules:
        - exists:
              - manifest.xml
    variables:
        DATABASE_URL: "mysql://root:root@database:3306/root?sslmode=disable&charset=utf8mb4"
        PROJECT_ROOT: /opt/shopware
        ADMIN_PATH: $CI_PROJECT_DIR/src/Administration/Resources/app/administration
        STOREFRONT_PATH: $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront
    before_script:
        - *base_env_vars
        - mkdir -p /opt/shopware/custom/apps || true
        - ln -s "$PWD" "/opt/shopware/custom/apps/$THEME_NAME"
        - /opt/shopware/bin/console system:install --drop-database --basic-setup --force
        - /opt/shopware/bin/console app:install --activate "$THEME_NAME"
    script:
        - /opt/shopware/bin/build-js.sh
        - rm -rf /opt/shopware/custom/apps/${THEME_NAME}/${THEME_SOURCE_DIR}Resources/app/storefront/node_modules || true
        - plugin-uploader ext:zip --strategy=plain -- "/opt/shopware/custom/apps/$THEME_NAME"
        - mkdir -p /fix_zip
        - mv *.zip /fix_zip
        - cd /fix_zip
        - unzip -q *.zip
        - rm *.zip
        - mv * $THEME_NAME # fix folder name
        - zip -q -r ${CI_PROJECT_DIR}/$THEME_NAME.zip $THEME_NAME/ # create new zip
        - cd ${CI_PROJECT_DIR}
        - '[[ -r "${THEME_NAME}.zip" ]] || (echo "failed to create zip. Please run ./bin/init $THEME_NAME" && exit 1)'
        - mv "${THEME_NAME}.zip" "${CI_PROJECT_DIR}/$THEME_NAME.zip"
    artifacts:
        name: '${CI_PROJECT_TITLE}.zip'
        paths:
            - '*.zip'

validate zip:
    stage: test
    image:
        name: ghcr.io/friendsofshopware/platform-plugin-dev:v6.4.13
        entrypoint: [""]
    variables:
        GIT_STRATEGY: none
    needs:
        - build zip
    rules:
        - exists:
              - manifest.xml
          if: '$CI_PROJECT_TITLE != "SwagPluginTemplate"'
    before_script: []
    script:
        - *base_env_vars
        - plugin-uploader ext:validate $PWD/$THEME_NAME.zip

validate snippets:
    stage: test
    needs: []
    rules:
        - changes:
              - '**/*.json'
    script:
        - ${PROJECT_ROOT}/bin/console snippets:validate

jest:
    stage: test
    needs: []
    rules:
        # exists does not support variables, so we cannot use ${THEME_SOURCE_DIR} here
        - exists:
              - Resources/app/storefront/jest.config.js
              - src/Resources/app/storefront/jest.config.js
    variables:
        ADMIN_PATH: $CI_PROJECT_DIR/src/Administration/Resources/app/administration
        STOREFRONT_PATH: $CI_PROJECT_DIR/src/Storefront/Resources/app/storefront
    script:
        - cd ${THEME_SOURCE_DIR}Resources/app/storefront/
        - npm ci --no-audit --prefer-offline
        - '$(npm bin)/jest --config jest.config.js --ci'
    coverage: '/^\s?All files[^|]*\|[^|]*\s+([\d\.]+)/'

template filled:
    stage: test
    image: bash
    needs: []
    rules:
        - exists:
              - TEMPLATE
          if: $CI_PROJECT_TITLE != "SwagThemeTemplate"
    before_script: []
    script:
        - echo "run './bin/init $CI_PROJECT_TITLE'"
        - exit 1

cypress:
    image: shopware/development:8.2-composer-2
    stage: E2E
    needs:
        - build zip
    rules:
        - exists:
            - Resources/app/storefront/test/e2e/cypress.json
            - src/Resources/app/storefront/test/e2e/cypress.json
    variables:
        GIT_STRATEGY: none
        E2E_PROJECT_PATH: Resources/app/storefront/test/e2e/
        APP_ENV: e2e
    before_script:
        - *base_env_vars
        - mv "$THEME_NAME.zip" /tmp/theme.zip
        - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.shopware.com/shopware/6/product/platform.git . --branch $PLATFORM_BRANCH
        - mkdir -p custom/apps || true
        - unzip -q /tmp/theme.zip -d custom/apps
        - *base_install
        - *theme_install
        - *install_dependencies
        - SERVICE_PHPFPM_OPTS=--allow-to-run-as-root CONTAINER_UID=root /entrypoint supervisord > /dev/null 2>&1 &
        - bin/console e2e:dump-db
        - cd custom/apps/$THEME_NAME/${THEME_SOURCE_DIR}${E2E_PROJECT_PATH}
        - npm ci --no-audit --prefer-offline
    script:
        - >
          if [[ -z "$CYPRESS_SPEC" ]]; then
              echo "Running non visual tests"
              APP_ENV=e2e ./node_modules/.bin/cypress run --browser $BROWSER --headless --env grep=visual,invert=1
          else
              echo "Running specs: $CYPRESS_SPEC"
              APP_ENV=e2e ./node_modules/.bin/cypress run --browser $BROWSER --headless --spec "$CYPRESS_SPEC"
          fi
    after_script:
        - *base_env_vars
        - cd custom/apps/$THEME_NAME/${THEME_SOURCE_DIR}${E2E_PROJECT_PATH}
        - mkdir $CI_PROJECT_DIR/var/log/e2e || true
        - mkdir -p cypress/mochareports || true
        - npx mochawesome-merge cypress/results/mocha/*.json > cypress/mochareports/report.json
        - npx marge cypress/mochareports/*.json -f report -o mochareports
        - mv cypress/results/single-reports/*.xml $CI_PROJECT_DIR/var/log/e2e/ || true
        - mv mochareports/ $CI_PROJECT_DIR/var/log/e2e/ || true
    artifacts:
        when: always
        paths:
            - var/log/*
        reports:
            junit: var/log/e2e/*.xml

upload zip to store:
    stage: deploy
    environment:
        name: account.shopware.com
        url: 'https://account.shopware.com'
    image:
        name: ghcr.io/friendsofshopware/platform-plugin-dev:v6.4.13
        entrypoint: [""]
    variables:
        GIT_STRATEGY: none
    needs:
        - build zip
    rules:
        - exists:
              - composer.json
          if: '$ACCOUNT_USER && $ACCOUNT_PASSWORD && $CI_PROJECT_TITLE != "SwagPluginTemplate"'
          when: manual
    before_script: []
    script:
        - *base_env_vars
        - plugin-uploader ext:upload "$(realpath "$THEME_NAME.zip")"
