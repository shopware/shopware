{
    "name": "shopware/platform",
    "description": "The Shopware e-commerce core",
    "type": "library",
    "keywords": [
        "framework",
        "shopware"
    ],
    "homepage": "https://www.shopware.com",
    "license": "MIT",
    "replace": {
        "shopware/core": "self.version",
        "shopware/storefront": "self.version",
        "shopware/administration": "self.version",
        "shopware/elasticsearch": "self.version",
        "symfony/polyfill-ctype": "*",
        "symfony/polyfill-iconv": "*",
        "symfony/polyfill-php72": "*",
        "symfony/polyfill-php73": "*",
        "symfony/polyfill-php74": "*",
        "symfony/polyfill-php80": "*",
        "symfony/polyfill-php81": "*",
        "symfony/polyfill-php82": "*"
    },
    "support": {
        "issues": "https://issues.shopware.com",
        "forum": "https://forum.shopware.com",
        "wiki": "https://developer.shopware.com",
        "docs": "https://developer.shopware.com",
        "chat": "https://slack.shopware.com"
    },
    "extra": {
        "bamarni-bin": {
            "bin-links": true,
            "forward-command": false
        },
        "branch-alias": {
            "dev-master": "6.6.x-dev",
            "dev-trunk": "6.6.x-dev"
        }
    },
    "config": {
        "sort-packages": true,
        "process-timeout": 7200,
        "allow-plugins": {
            "bamarni/composer-bin-plugin": true,
            "composer/package-versions-deprecated": true,
            "phpstan/extension-installer": true,
            "cweagans/composer-patches": true,
            "symfony/runtime": true
        }
    },
    "require": {
        "php": "~8.2.0 || ~8.3.0",
        "ext-curl": "*",
        "ext-dom": "*",
        "ext-fileinfo": "*",
        "ext-gd": "*",
        "ext-intl": "*",
        "ext-json": "*",
        "ext-mbstring": "*",
        "ext-openssl": "*",
        "ext-pdo": "*",
        "ext-pdo_mysql": "*",
        "ext-session": "*",
        "ext-simplexml": "*",
        "ext-sodium": "*",
        "ext-xml": "*",
        "ext-zip": "*",
        "ext-zlib": "*",
        "composer-runtime-api": "^2.0",
        "cocur/slugify": "^4.3.0",
        "composer/composer": "^2.7",
        "composer/semver": "^3.2",
        "doctrine/dbal": "^3.7",
        "doctrine/inflector": "^2.0",
        "dompdf/dompdf": "2.0.4",
        "dragonmantank/cron-expression": "^3.3",
        "erusev/parsedown-extra": "^0.8.1",
        "ezyang/htmlpurifier": "^4.16",
        "guzzlehttp/guzzle": "^7.5.0",
        "guzzlehttp/psr7": "^2.4",
        "lcobucci/clock": "^3.1.0",
        "lcobucci/jwt": "^5.0",
        "league/flysystem": "^3.10.3",
        "league/flysystem-memory": "^3.10.3",
        "league/mime-type-detection": "^1.13.0",
        "league/oauth2-server": "^8.5",
        "meyfa/php-svg": "^0.14.0",
        "monolog/monolog": "^3.3.1",
        "nyholm/psr7": "^1.5",
        "opensearch-project/opensearch-php": "^2.0",
        "padaliyajay/php-autoprefixer": "^1.4",
        "psr/cache": "^3.0.0",
        "psr/event-dispatcher": "^1.0.0",
        "psr/http-factory": "^1.0.1",
        "psr/http-message": "^1.1 || ^2.0",
        "psr/log": "^3.0.0",
        "ramsey/uuid": "^4.7",
        "scssphp/scssphp": "v1.12.0",
        "setasign/fpdi": "^2.3.7",
        "shopware/conflicts": ">=0.2.0",
        "shyim/opensearch-php-dsl": "^1.0.5",
        "squirrelphp/twig-php-syntax": "^1.8.0",
        "symfony/asset": "~7.1.1",
        "symfony/cache": "~7.1.1",
        "symfony/cache-contracts": "~3.5.0",
        "symfony/clock": "~7.1.1",
        "symfony/config": "~7.1.1",
        "symfony/console": "~7.1.1",
        "symfony/debug-bundle": "~7.1.1",
        "symfony/dependency-injection": "~7.1.1",
        "symfony/deprecation-contracts": "~3.5.0",
        "symfony/doctrine-messenger": "~7.1.1",
        "symfony/dotenv": "~7.1.1",
        "symfony/error-handler": "~7.1.1",
        "symfony/event-dispatcher": "~7.1.1",
        "symfony/event-dispatcher-contracts": "~3.5.0",
        "symfony/filesystem": "~7.1.1",
        "symfony/finder": "~7.1.1",
        "symfony/framework-bundle": "~7.1.1",
        "symfony/http-client": "~7.1.1",
        "symfony/http-foundation": "~7.1.1",
        "symfony/http-kernel": "~7.1.1",
        "symfony/lock": "~7.1.1",
        "symfony/mailer": "~7.1.1",
        "symfony/messenger": "~7.1.1",
        "symfony/mime": "~7.1.1",
        "symfony/monolog-bridge": "~7.1.1",
        "symfony/monolog-bundle": "~3.10.0",
        "symfony/options-resolver": "~7.1.1",
        "symfony/polyfill-php83": "~1.29.0",
        "symfony/process": "~7.1.1",
        "symfony/property-access": "~7.1.1",
        "symfony/property-info": "~7.1.1",
        "symfony/proxy-manager-bridge": "~6.4.8",
        "symfony/psr-http-message-bridge": "~7.1.1",
        "symfony/rate-limiter": "~7.1.1",
        "symfony/routing": "~7.1.1",
        "symfony/runtime": "~7.1.1",
        "symfony/scheduler": "~7.1.1",
        "symfony/security-core": "~7.1.1",
        "symfony/security-csrf": "~7.1.1",
        "symfony/serializer": "~7.1.1",
        "symfony/service-contracts": "~3.5.0",
        "symfony/stopwatch": "~7.1.1",
        "symfony/translation": "~7.1.1",
        "symfony/translation-contracts": "~3.5.0",
        "symfony/twig-bridge": "~7.1.1",
        "symfony/twig-bundle": "~7.1.1",
        "symfony/validator": "~7.1.1",
        "symfony/var-exporter": "~7.1.1",
        "symfony/yaml": "~7.1.1",
        "tecnickcom/tcpdf": "^6.6.1",
        "twig/intl-extra": "^3.10.0",
        "twig/string-extra": "^3.10.0",
        "twig/twig": "^3.10.3",
        "zircote/swagger-php": "^4.9.2"
    },
    "require-dev": {
        "ext-tokenizer": "*",
        "ext-xmlwriter": "*",
        "bamarni/composer-bin-plugin": "^1.8.2",
        "brianium/paratest": "^7.3",
        "dominikb/composer-license-checker": "^2.5",
        "ergebnis/phpunit-slow-test-detector": "^2.4",
        "jdorn/sql-formatter": "^1.2.17",
        "league/construct-finder": "^1.1",
        "league/flysystem-async-aws-s3": "^3.10.3",
        "league/flysystem-google-cloud-storage": "^3.10.3",
        "nikic/php-parser": "^4.16.0",
        "opis/json-schema": "^2.3.0",
        "phpbench/phpbench": "^1.2.15",
        "phpdocumentor/reflection-docblock": "^5.3.0",
        "phpdocumentor/type-resolver": "^1.7.1",
        "phpstan/extension-installer": "^1.4.1",
        "phpstan/phpstan": "1.11.5",
        "phpstan/phpstan-deprecation-rules": "1.2.0",
        "phpstan/phpstan-phpunit": "1.4.0",
        "phpstan/phpstan-symfony": "1.4.4",
        "phpunit/phpunit": "^10.5",
        "predis/predis": "^2.2",
        "rector/type-perfect": "0.1.6",
        "shopware/dev-tools": "^1.3",
        "smalot/pdfparser": "^2.2.2",
        "symfony/browser-kit": "~7.1.1",
        "symfony/css-selector": "~7.1.1",
        "symfony/dom-crawler": "~7.1.1",
        "symfony/expression-language": "~7.1.1",
        "symfony/phpunit-bridge": "~7.1.1",
        "symfony/var-dumper": "~7.1.1",
        "symplify/phpstan-rules": "13.0.0",
        "tomasvotruba/type-coverage": "^0.2.1"
    },
    "suggest": {
        "shopware/dev-tools": "For development tools, profiler, faker, etc",
        "league/flysystem-async-aws-s3": "Required to use the Flysystem S3 driver (^3.10.3)",
        "league/flysystem-google-cloud-storage": "Required to use the Flysystem Google cloud driver (^3.10.3)"
    },
    "repositories": [
        {
            "type": "path",
            "url": "custom/plugins/*",
            "options": {
                "symlink": true
            }
        }
    ],
    "scripts-descriptions": {
        "admin:code-mods": "Run admin code mods",
        "admin:create:test": "Create a admin test blueprint",
        "admin:generate-entity-schema-types": "Generate the Typescript definition for the entity schema",
        "admin:unit": "Launches the jest unit test-suite for the Admin",
        "admin:unit:watch": "Launches the interactive jest unit test-suite watcher for the Admin",
        "bc-check": "Checks for backwards compatibility breaks in the current branch",
        "build:js": "Builds Administration & Storefront",
        "build:js:admin": "Builds the Administration",
        "build:js:component-library": "Builds the component library",
        "build:js:storefront": "Builds the Storefront's JavaScript",
        "check:license": "Check thrid-party dependency licenses",
        "e2e:cypress": " ",
        "e2e:cypress-repeat": " ",
        "e2e:open": "Launches the Cypress E2E test-suite UI",
        "e2e:percy": " ",
        "e2e:prepare": "Installs the Admin Extension SDK test plugin with fixtures and dumps the database",
        "e2e:sdk-plugin:fixture-to-plugin": " ",
        "e2e:sdk-plugin:plugin-to-fixture": " ",
        "e2e:sdk-plugin:prepare-plugin": " ",
        "e2e:setup": "Installs a clean shopware instance for E2E environment and launches 'e2e:prepare'",
        "e2e:vue3": "Launches the Cypress E2E test-suite UI with the Vue3 feature flag enabled",
        "e2e:web-update:open": " ",
        "e2e:web-update:prepare": " ",
        "e2e:web-update:start": " ",
        "ecs": "Checks all files regarding the Easy Coding Standard",
        "ecs-fix": "Checks all files regarding the Easy Coding Standard and fixes them if possible",
        "eslint": "Codestyle checks all (Administration/Storefront/E2E) JS/TS files",
        "eslint:admin": "Codestyle checks Administration JS/TS files",
        "eslint:admin:fix": "Codestyle checks Administration JS/TS files and fixes them if possible",
        "eslint:e2e": "Codestyle checks all E2E JS/TS files",
        "eslint:e2e:fix": "Codestyle checks all E2E JS/TS files and fixes them if possible",
        "eslint:storefront": "Codestyle checks all Storefront JS/TS files",
        "framework:schema:dump": " ",
        "hook:pre-commit": " ",
        "hook:pre-commit:install": " ",
        "hook:pre-push": " ",
        "hook:pre-push:install": " ",
        "init:db": " ",
        "init:e2e": " ",
        "init:js": " ",
        "init:testdb": "Initializes the test database",
        "lint": "Shorthand for the composer commands 'stylelint', 'eslint', 'ecs', 'lint:changlog' and 'lint:snippets'",
        "lint:changelog": "Validates changelogs",
        "lint:snippets": "Validates existence of snippets in all core-supported languages",
        "locust:init": " ",
        "locust:run": " ",
        "ludtwig:storefront": "Codestyle checks for all Storefront twig files using ludtwig",
        "ludtwig:storefront:fix": "Auto-fixes all fixable twig codestyle in Storefront",
        "make:coverage": "Generate test coverage files for current branch",
        "npm:admin": " ",
        "npm:admin:bin": " ",
        "npm:admin:check-license": "Check thrid-party dependency licenses for administration",
        "npm:component-library": " ",
        "npm:component-library:bin": " ",
        "npm:e2e": " ",
        "npm:e2e:bin": " ",
        "npm:storefront": " ",
        "npm:storefront:bin": " ",
        "npm:storefront:check-license": "Check thrid-party dependency licenses for storefront",
        "paratest": " ",
        "phpbench": " ",
        "phpstan": "Launches the PHP static analysis tool",
        "phpstan-errors-by-area": "Shows the ignored errors defined in the phpstan-baseline.neon by area",
        "phpstan-v66-errors-by-area": "Shows the ignored errors for versio 6.6 defined in the phpstan-v66-baseline.neon by area",
        "phpunit": "Launches the PHP unit test-suite",
        "post-install-cmd": " ",
        "post-update-cmd": " ",
        "reset": "Resets this Shopware instance, without composer and npm install. (Faster reset if no dependencies changed)",
        "setup": "Resets and re-installs this Shopware instance",
        "static-analyze": "Launches the PHP Stan static analysis tool",
        "storefront:unit": "Launches the jest unit test-suite for the Storefront",
        "storefront:unit:watch": "Launches the interactive jest unit test-suite watcher for the Storefront",
        "stylelint": "Codestyle checks all SCSS files of Administration and Storefront",
        "stylelint:admin": "Code Style checks for all Admin SCSS files",
        "stylelint:admin:fix": "Code Style checks for all Admin SCSS files and fixes them if possible",
        "stylelint:storefront": "Code Style checks for all Storefront SCSS files",
        "stylelint:storefront:fix": "Code Style checks for all Storefront SCSS files and fixes them if possible",
        "watch:admin": "Enables hot module reloading for the Admin",
        "watch:storefront": "Enables hot module reloading for the Storefront"
    },
    "scripts": {
        "admin:code-mods": "@npm:admin run code-mods --",
        "admin:create:test": "@npm:admin run create-test",
        "admin:generate-entity-schema-types": [
            "@framework:schema:dump",
            "@npm:admin run convert-entity-schema"
        ],
        "admin:unit": [
            "Composer\\Config::disableProcessTimeout",
            "@framework:schema:dump",
            "@npm:admin run unit-setup",
            "@npm:admin run unit"
        ],
        "admin:unit:watch": [
            "Composer\\Config::disableProcessTimeout",
            "@framework:schema:dump",
            "@npm:admin run unit-watch"
        ],
        "bc-check": [
            "@php vendor-bin/roave-backward-compatibility-check/bin/verify-version.php",
            "roave-backward-compatibility-check --from=$(git tag -l --sort -version:refname | head -n 1)"
        ],
        "build:js": [
            "@build:js:admin",
            "@build:js:storefront"
        ],
        "build:js:admin": [
            "@php bin/console bundle:dump",
            "@php bin/console feature:dump",
            "@admin:generate-entity-schema-types",
            "@npm:admin run build",
            "@php bin/console assets:install"
        ],
        "build:js:component-library": [
            "@npm:component-library run generate"
        ],
        "build:js:storefront": [
            "@php bin/console bundle:dump",
            "@php bin/console feature:dump",
            "@npm:storefront run production",
            "cd src/Storefront/Resources/app/storefront && node copy-to-vendor.js",
            "@php bin/console theme:compile --sync"
        ],
        "check:license": "bash -c \"vendor/bin/composer-license-checker check -a $(sed -z 's/\\n/ -a /g' .allowed-licenses)\"",
        "e2e:cypress": [
            "export APP_ENV=e2e; export CYPRESS_localUsage=1; export CYPRESS_shopwareRoot=\"$PWD\"; cd tests/e2e; export PATH=\"$PWD/node_modules/.bin/:$PATH\"; \"$CYPRESS_shopwareRoot\"/bin/exec-with-env cypress"
        ],
        "e2e:cypress-repeat": [
            "export APP_ENV=e2e; export CYPRESS_localUsage=1; export CYPRESS_shopwareRoot=\"$PWD\"; cd tests/e2e; export PATH=\"$PWD/node_modules/.bin/:$PATH\"; \"$CYPRESS_shopwareRoot\"/bin/exec-with-env cypress-repeat"
        ],
        "e2e:open": [
            "Composer\\Config::disableProcessTimeout",
            "@e2e:cypress open"
        ],
        "e2e:percy": [
            "export APP_ENV=e2e; export CYPRESS_localUsage=1; export CYPRESS_shopwareRoot=\"$PWD\"; cd tests/e2e; export PATH=\"$PWD/node_modules/.bin/:$PATH\"; \"$CYPRESS_shopwareRoot\"/bin/exec-with-env percy"
        ],
        "e2e:prepare": [
            "@putenv APP_ENV=e2e",
            "@putenv CYPRESS_localUsage=1",
            "@e2e:sdk-plugin:fixture-to-plugin",
            "@e2e:sdk-plugin:prepare-plugin",
            "@php bin/console e2e:dump-db"
        ],
        "e2e:sdk-plugin:fixture-to-plugin": [
            "rm -rf $PWD/custom/plugins/TestPlugin;",
            "cp -a $PWD/tests/e2e/cypress/fixtures/TestPlugin/. $PWD/custom/plugins/TestPlugin/"
        ],
        "e2e:sdk-plugin:plugin-to-fixture": [
            "rm -rf $PWD/tests/e2e/cypress/fixtures/TestPlugin;",
            "cp -a $PWD/custom/plugins/TestPlugin/. $PWD/tests/e2e/cypress/fixtures/TestPlugin/"
        ],
        "e2e:sdk-plugin:prepare-plugin": [
            "cd $PWD/custom/plugins/TestPlugin/src/Resources/app/administration/; npm install --no-audit --prefer-offline;",
            "bin/console plugin:refresh;",
            "bin/console plugin:install --activate TestPlugin;",
            "@build:js:admin"
        ],
        "e2e:setup": [
            "@putenv APP_ENV=e2e",
            "@setup",
            "@init:e2e",
            "@e2e:prepare"
        ],
        "e2e:vue3": [
            "Composer\\Config::disableProcessTimeout",
            "export CYPRESS_VUE3=\"true\"; export CYPRESS_grepTags=\"VUE3\"; export APP_ENV=e2e; export CYPRESS_localUsage=1; export CYPRESS_shopwareRoot=\"$PWD\"; cd tests/e2e; export PATH=\"$PWD/node_modules/.bin/:$PATH\"; \"$CYPRESS_shopwareRoot\"/bin/exec-with-env cypress open"
        ],
        "e2e:web-update:open": [
            "Composer\\Config::disableProcessTimeout",
            "@e2e:web-update:start",
            "export CYPRESS_baseUrl=${INSTALL_URL-${CYPRESS_baseUrl-http://localhost:8000}}; export APP_ENV=e2e; export CYPRESS_localUsage=1; export CYPRESS_shopwareRoot=\"$PWD\"; cd tests/e2e; export PATH=\"$PWD/node_modules/.bin/:$PATH\"; \"$CYPRESS_shopwareRoot\"/bin/exec-with-env cypress open"
        ],
        "e2e:web-update:prepare": [
            "rm -rf shop",
            "wget -q -O install.zip https://releases.shopware.com/sw6/install_v6.4.17.2_4d2c85fb448571fa4f30edce635f33a67dda1d76.zip",
            "unzip -q -o -d shop install.zip",
            "rm install.zip",
            "cd shop; bin/console system:setup --database-url mysql://${CYPRESS_dbUser-root}:${CYPRESS_dbPassword-root}@${CYPRESS_dbHost-localhost}/${CYPRESS_dbName-shopware} --app-url ${INSTALL_URL-${CYPRESS_baseUrl-http://localhost:8000}} -f -n",
            "echo PROJECT_ROOT=$PWD/shop >> shop/.env",
            "cd shop; APP_URL=${INSTALL_URL-${CYPRESS_baseUrl-http://localhost:8000}} bin/console system:install --basic-setup --create-database --drop-database --force -n",
            "cd shop; bin/console system:config:set core.frw.completedAt '2019-10-07T10:46:23+00:00'",
            "cd shop; bin/console system:config:set core.store.apiUri http://localhost:8060",
            "cd shop; bin/console system:config:set core.update.apiUri http://localhost:8060",
            "cd shop; composer config repositories.0 '{\"type\": \"path\", \"url\": \"../src/*\"}'",
            "cd shop; sed -i '/\\$this->verifyResponseSignature(\\$response);/d' vendor/shopware/core/Framework/Update/Services/ApiClient.php",
            "cd shop; sed -i 's/\\$signatureHeaderName = self::SHOPWARE_SIGNATURE_HEADER;/return \\$response;/g' vendor/shopware/core/Framework/Store/Services/VerifyResponseSignatureMiddleware.php",
            "cd src/WebInstaller; composer install",
            "cd src/WebInstaller; composer build-phar",
            "mv src/WebInstaller/shopware-installer.phar.php shop/public/shopware-installer.phar.php"
        ],
        "e2e:web-update:start": [
            "@putenv SW_RECOVERY_NEXT_VERSION=6.6.99.9",
            "@putenv SW_RECOVERY_NEXT_BRANCH=dev-trunk",
            "@putenv CYPRESS_SKIP_INIT=1",
            "symfony local:server:stop --dir=shop",
            "symfony local:server:stop --dir=tests/e2e/update-api-mock",
            "APP_URL=${INSTALL_URL-${CYPRESS_baseUrl-http://localhost:8000}} symfony local:server:start --dir=shop --port=8050 -d",
            "symfony local:server:start --dir=tests/e2e/update-api-mock --port=8060 -d"
        ],
        "ecs": "ecs check src tests",
        "ecs-fix": "ecs check --fix src tests",
        "eslint": [
            "@eslint:admin",
            "@eslint:storefront",
            "@eslint:e2e"
        ],
        "eslint:admin": "@npm:admin run lint:all",
        "eslint:admin:fix": "@npm:admin run lint:fix",
        "eslint:e2e": "@npm:e2e run lint",
        "eslint:e2e:fix": "@npm:e2e run lint:fix",
        "eslint:storefront": "@npm:storefront run lint:js",
        "framework:schema:dump": "@php bin/console -e prod framework:schema -s 'entity-schema' src/Administration/Resources/app/administration/test/_mocks_/entity-schema.json",
        "hook:pre-commit": [
            "bin/pre-commit"
        ],
        "hook:pre-commit:install": [
            "ln -sf $PWD/bin/pre-commit .git/hooks/pre-commit"
        ],
        "hook:pre-push": [
            "bin/pre-commit"
        ],
        "hook:pre-push:install": [
            "ln -sf $PWD/bin/pre-push .git/hooks/pre-push"
        ],
        "init:db": [
            "@php bin/console system:install --drop-database --basic-setup --force --no-assign-theme"
        ],
        "init:e2e": "@npm:e2e clean-install --no-audit --prefer-offline",
        "init:js": [
            "@npm:admin clean-install --no-audit --prefer-offline",
            "@npm:storefront clean-install --no-audit --prefer-offline",
            "export PROJECT_ROOT=\"$PWD\"; \"$PROJECT_ROOT\"/bin/install-extension-npm"
        ],
        "init:testdb": [
            "FORCE_INSTALL=true vendor/bin/phpunit --group=none"
        ],
        "lint": [
            "@stylelint",
            "@eslint",
            "@ecs",
            "@lint:changelog",
            "@lint:snippets"
        ],
        "lint:changelog": "@php bin/shopware changelog:check",
        "lint:snippets": "@php bin/shopware snippets:validate",
        "locust:init": "php src/Core/DevOps/Locust/setup.php",
        "locust:run": "cd src/Core/DevOps/Locust && locust",
        "ludtwig:storefront": "cd ./src/Storefront/Resources/views; ludtwig .",
        "ludtwig:storefront:fix": "@ludtwig:storefront --fix",
        "make:coverage": [
            "@php bin/console make:coverage $(git diff --name-only origin/trunk -- \"*.php\" | grep -vE 'Test\\.php$' | sed 's/.*/\"&\"/' | tr '\\n' ' ')"
        ],
        "npm:admin": "@npm:admin:bin npm",
        "npm:admin:bin": "export PROJECT_ROOT=\"$PWD\"; cd src/Administration/Resources/app/administration; export PATH=\"$PWD/node_modules/.bin/:$PATH\"; \"$PROJECT_ROOT\"/bin/exec-with-env ",
        "npm:admin:check-license": "export ALLOWED_LICENSES=\"$(sed -z 's/\\n/;/g' .allowed-licenses)\"; cd src/Administration/Resources/app/administration; bash -c \"node_modules/.bin/license-checker-rseidelsohn --onlyAllow \\\"$ALLOWED_LICENSES\\\" --excludePrivatePackages\"",
        "npm:component-library": "@npm:component-library:bin npm",
        "npm:component-library:bin": "export PROJECT_ROOT=\"$PWD\"; cd src/Administration/Resources/app/administration/build/nuxt-component-library; export PATH=\"$PWD/node_modules/.bin/:$PATH\"; \"$PROJECT_ROOT\"/bin/exec-with-env ",
        "npm:e2e": "@npm:e2e:bin npm",
        "npm:e2e:bin": "export CYPRESS_shopwareRoot=\"$PWD\"; cd tests/e2e; export PATH=\"$PWD/node_modules/.bin/:$PATH\"; \"$CYPRESS_shopwareRoot\"/bin/exec-with-env ",
        "npm:storefront": "@npm:storefront:bin npm",
        "npm:storefront:bin": "export PROJECT_ROOT=\"$PWD\"; cd src/Storefront/Resources/app/storefront; export PATH=\"$PWD/node_modules/.bin/:$PATH\"; \"$PROJECT_ROOT\"/bin/exec-with-env ",
        "npm:storefront:check-license": "export ALLOWED_LICENSES=\"$(sed -z 's/\\n/;/g' .allowed-licenses)\"; cd src/Storefront/Resources/app/storefront; bash -c \"node_modules/.bin/license-checker-rseidelsohn --onlyAllow \\\"$ALLOWED_LICENSES\\\" --excludePrivatePackages\"",
        "paratest": [
            "paratest --configuration phpunit.xml.dist --testsuite=paratest --exclude-group=skip-paratest,needsWebserver --processes $(getconf _NPROCESSORS_ONLN)"
        ],
        "phpbench": "phpbench run --report=compressed",
        "phpstan": [
            "Composer\\Config::disableProcessTimeout",
            "@php src/Core/DevOps/StaticAnalyze/phpstan-bootstrap.php",
            "phpstan analyze --memory-limit=2G"
        ],
        "phpstan-errors-by-area": [
            "php src/Core/DevOps/StaticAnalyze/print-ignored-errors-by-area.php phpstan-baseline.neon"
        ],
        "phpstan-v66-errors-by-area": [
            "php src/Core/DevOps/StaticAnalyze/print-ignored-errors-by-area.php phpstan-v66-baseline.neon"
        ],
        "phpunit": [
            "phpunit"
        ],
        "post-install-cmd": [
            "@composer bin all install --ansi"
        ],
        "post-update-cmd": [
            "@composer bin all update --ansi"
        ],
        "reset": [
            "@init:db",
            "@build:js",
            "@php bin/console theme:change --sync --all Storefront",
            "@php bin/console assets:install"
        ],
        "setup": [
            "@composer install -o",
            "mkdir -p config/jwt || true",
            "mkdir -p custom/plugins || true",
            "@init:db",
            "@init:js",
            "@build:js",
            "@php bin/console theme:change --sync --all Storefront",
            "@php bin/console assets:install"
        ],
        "static-analyze": [
            "@phpstan src/"
        ],
        "storefront:unit": [
            "@npm:storefront run unit"
        ],
        "storefront:unit:watch": [
            "Composer\\Config::disableProcessTimeout",
            "@npm:storefront run unit-watch"
        ],
        "stylelint": [
            "@stylelint:admin src/**/*.scss",
            "@stylelint:storefront src/**/*.scss"
        ],
        "stylelint:admin": "@npm:admin run lint:scss",
        "stylelint:admin:fix": "@npm:admin run lint:scss-fix",
        "stylelint:storefront": "@npm:storefront run lint:scss",
        "stylelint:storefront:fix": "@npm:storefront run lint:scss-fix",
        "watch:admin": [
            "Composer\\Config::disableProcessTimeout",
            "@php bin/console feature:dump",
            "@php bin/console bundle:dump",
            "@admin:generate-entity-schema-types",
            "@npm:admin run dev"
        ],
        "watch:storefront": [
            "Composer\\Config::disableProcessTimeout",
            "@php bin/console bundle:dump",
            "@php bin/console feature:dump",
            "@php bin/console theme:dump",
            "@npm:storefront run hot-proxy"
        ]
    },
    "autoload": {
        "files": [
            "src/Core/Framework/Adapter/Doctrine/Patch/AbstractAsset.php"
        ],
        "psr-4": {
            "Shopware\\": "src/"
        },
        "exclude-from-classmap": [
            "src/**/Test/",
            "tests/"
        ]
    },
    "autoload-dev": {
        "psr-4": {
            "Shopware\\Tests\\Examples\\": "tests/examples/",
            "Shopware\\Tests\\Unit\\": "tests/unit/",
            "Shopware\\Tests\\Integration\\": "tests/integration/",
            "Shopware\\Tests\\Bench\\": "tests/performance/bench/",
            "Shopware\\Tests\\Migration\\": "tests/migration/",
            "Shopware\\Tests\\DevOps\\": "tests/devops/"
        }
    }
}
