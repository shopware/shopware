<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <!--Entity Definitions-->
        <service id="Shopware\Core\Framework\MessageQueue\DeadMessage\DeadMessageDefinition">
            <tag name="shopware.entity.definition"/>
        </service>

        <service id="Shopware\Core\Framework\MessageQueue\MessageQueueStatsDefinition">
            <tag name="shopware.entity.definition"/>
        </service>

        <!--  ConnectionFactory -->
        <service id="Shopware\Core\Framework\MessageQueue\Enqueue\ConnectionFactoryFactory">
            <argument type="service" id="Doctrine\DBAL\Connection"/>
        </service>

        <!--Message Bus-->
        <service id="Shopware\Core\Framework\MessageQueue\MonitoringBusDecorator" decorates="messenger.bus.shopware">
            <argument type="service" id="Shopware\Core\Framework\MessageQueue\MonitoringBusDecorator.inner"/>
            <argument type="service" id="Doctrine\DBAL\Connection"/>
        </service>

        <service id="encrypted.messenger.bus.shopware" class="Shopware\Core\Framework\MessageQueue\EncryptedBus">
            <argument type="service" id="messenger.bus.shopware"/>
            <argument type="service" id="shopware.public_key"/>
        </service>

        <!--Message Handler-->
        <service id="Shopware\Core\Framework\MessageQueue\Handler\EncryptedMessageHandler">
            <argument type="service" id="messenger.bus.shopware"/>
            <argument type="service" id="shopware.private_key"/>

            <tag name="messenger.message_handler"/>
        </service>

        <service id="Shopware\Core\Framework\MessageQueue\Handler\RetryMessageHandler">
            <argument type="service" id="dead_message.repository"/>
            <argument type="tagged" tag="messenger.message_handler"/>
            <argument type="service" id="logger"/>

            <tag name="messenger.message_handler"/>
        </service>

        <!--Middleware-->
        <service id="Shopware\Core\Framework\MessageQueue\Middleware\RetryMiddleware">
            <argument type="service" id="dead_message.repository"/>
        </service>

        <!--Service-->
        <service id="Shopware\Core\Framework\MessageQueue\DeadMessage\RequeueDeadMessagesService">
            <argument type="service" id="dead_message.repository"/>
            <argument type="service" id="messenger.bus.shopware"/>
            <argument type="service" id="encrypted.messenger.bus.shopware"/>
        </service>

        <!--EventSubscriber-->
        <service id="Shopware\Core\Framework\MessageQueue\Subscriber\DeadMessageLoadedSubscriber">
            <tag name="kernel.event_subscriber"/>
        </service>

        <service id="Shopware\Core\Framework\MessageQueue\Subscriber\MessageFailedHandler">
            <argument type="service" id="Doctrine\DBAL\Connection"/>
            <tag name="kernel.event_subscriber"/>
        </service>

        <!--ScheduledTask-->
        <service id="Shopware\Core\Framework\MessageQueue\ScheduledTask\RequeueDeadMessagesTask">
            <tag name="shopware.scheduled.task"/>
        </service>

        <service id="Shopware\Core\Framework\MessageQueue\ScheduledTask\RequeueDeadMessagesHandler">
            <argument type="service" id="scheduled_task.repository"/>
            <argument type="service" id="Shopware\Core\Framework\MessageQueue\DeadMessage\RequeueDeadMessagesService"/>

            <tag name="messenger.message_handler"/>
        </service>

        <!--Controller-->
        <service id="Shopware\Core\Framework\MessageQueue\Api\ConsumeMessagesController" public="true">
            <argument type="service" id="messenger.receiver_locator"/>
            <argument type="service" id="messenger.bus.shopware"/>
            <argument>%shopware.admin_worker.poll_interval%</argument>
            <argument type="service" id="messenger.listener.stop_worker_on_restart_signal_listener"/>
            <argument type="service" id="messenger.listener.stop_worker_on_sigterm_signal_listener"/>
            <argument type="service" id="messenger.listener.dispatch_pcntl_signal_listener"/>
            <call method="setContainer">
                <argument type="service" id="service_container"/>
            </call>
        </service>
    </services>
</container>
