<?php declare(strict_types=1);

namespace Shopware\Core\Framework;

use PHPUnit\Framework\TestCase;

class Feature
{
    /**
     * @var string[]
     */
    private static $registeredFeatures;

    /**
     * @internal
     */
    public static function setRegisteredFeatures(iterable $registeredFeatures, string $dumpPath): void
    {
        self::$registeredFeatures = [];
        foreach ($registeredFeatures as $flag) {
            $flag = self::normalizeName($flag);
            self::$registeredFeatures[$flag] = $flag;
        }

        self::dumpFeatures($dumpPath);
    }

    public static function normalizeName(string $name): string
    {
        /*
         * Examples:
         * - NEXT-1234
         * - FEATURE_NEXT_1234
         * - SAAS_321
         */
        if (!\preg_match('/(feature)?[-_ ]?([^-_ 0-9]*)[-_ ]?([0-9]+)/i', $name, $matches)) {
            throw new \InvalidArgumentException('Invalid feature name "' . $name . '"');
        }

        $project = $matches[2];
        if ($project !== '') {
            $project .= '_';
        }

        return \strtoupper('FEATURE_' . $project . $matches[3]);
    }

    public static function isActive(string $feature): bool
    {
        $env = $_ENV['APP_ENV'] ?? $_SERVER['APP_ENV'] ?? 'prod';
        $allEnabled = $_SERVER['FEATURE_ALL'] ?? false;
        if ($env !== 'prod' && $allEnabled && $allEnabled !== 'false' && $allEnabled !== '0' && $allEnabled !== '') {
            return true;
        }

        $feature = self::normalizeName($feature);

        if (self::$registeredFeatures !== null
            && !isset(self::$registeredFeatures[$feature])
            && $env !== 'prod'
        ) {
            \trigger_error('Unknown feature "' . $feature . '"', E_USER_WARNING);
        }

        if (!isset($_SERVER[$feature])) {
            return false;
        }

        $value = \trim($_SERVER[$feature]);

        return $value
            && $value !== 'false'
            && $value !== '0'
            && $value !== '';
    }

    public static function ifActive(string $flagName, \Closure $closure): void
    {
        self::isActive($flagName) && $closure();
    }

    public static function ifActiveCall(string $flagName, $object, string $methodName, ...$arguments): void
    {
        $closure = function () use ($object, $methodName, $arguments): void {
            $object->{$methodName}(...$arguments);
        };

        self::ifActive($flagName, \Closure::bind($closure, $object, $object));
    }

    public static function skipTestIfInActive(string $flagName, TestCase $test): void
    {
        if (self::isActive($flagName)) {
            return;
        }

        $test::markTestSkipped('Skipping feature test for flag  "' . $flagName . '"');
    }

    public static function skipTestIfActive(string $flagName, TestCase $test): void
    {
        if (!self::isActive($flagName)) {
            return;
        }

        $test::markTestSkipped('Skipping feature test for flag  "' . $flagName . '"');
    }

    public static function getAll(): array
    {
        $resolvedFlags = [];

        foreach (self::$registeredFeatures as $name) {
            $resolvedFlags[$name] = self::isActive($name);
        }

        return $resolvedFlags;
    }

    private static function dumpFeatures(string $dumpPath): void
    {
        $env = $_ENV['APP_ENV'] ?? $_SERVER['APP_ENV'] ?? 'prod';
        // do not dump in prod
        if ($env === 'prod') {
            return;
        }

        $values = [];
        foreach (self::$registeredFeatures as $flag) {
            $values[$flag] = self::isActive($flag);
        }

        $template = <<<'TEMPLATE'
<?php

// DO NOT EDIT! This file is auto generated by '%class%'}
namespace Symfony\Component\DependencyInjection\Loader\Configurator;

return static function(ContainerConfigurator $configurator) {
    $configurator->parameters()->set(
        'shopware.features',
        %features%
    );
};
TEMPLATE;

        $rendered = \str_replace(
            ['%class%', '%features%'],
            [self::class, \var_export($values, true)],
            $template
        );

        $current = \file_exists($dumpPath) ? \file_get_contents($dumpPath) : '';

        if ($current !== $rendered) {
            \file_put_contents($dumpPath, $rendered);
        }
    }
}
