diff --git a/src/CompareClasses.php b/src/CompareClasses.php
index 2b3c594..8edbfb8 100644
--- a/src/CompareClasses.php
+++ b/src/CompareClasses.php
@@ -25,6 +25,8 @@ final class CompareClasses implements CompareApi

     private TraitBased $traitBasedComparisons;

+    private array $excludePatterns;
+
     public function __construct(
         ClassBased $classBasedComparisons,
         InterfaceBased $interfaceBasedComparisons,
@@ -33,6 +35,9 @@ final class CompareClasses implements CompareApi
         $this->classBasedComparisons     = $classBasedComparisons;
         $this->interfaceBasedComparisons = $interfaceBasedComparisons;
         $this->traitBasedComparisons     = $traitBasedComparisons;
+
+        $excludes = require __DIR__ . '/../../../../../../.bc-exclude.php';
+        $this->excludePatterns = $excludes['errors'];
     }

     public function __invoke(
@@ -52,11 +57,24 @@ final class CompareClasses implements CompareApi
             )
         );

-        return Changes::fromIterator($this->makeSymbolsIterator(
+        $filteredSymbolIterator = function (iterable $symbols): iterable {
+            /** @var Change $symbol */
+            foreach($symbols as $symbol) {
+                foreach($this->excludePatterns as $pattern) {
+                    if(0 < preg_match("/$pattern/", $symbol->__toString())) {
+                        continue 2;
+                    }
+                }
+
+                yield $symbol;
+            }
+        };
+
+        return Changes::fromIterator($filteredSymbolIterator($this->makeSymbolsIterator(
             $definedApiClassNames,
             $pastSourcesWithDependencies,
             $newSourcesWithDependencies
-        ));
+        )));
     }

     /**
@@ -70,7 +88,12 @@ final class CompareClasses implements CompareApi
         ClassReflector $newSourcesWithDependencies
     ): iterable {
         foreach ($definedApiClassNames as $apiClassName) {
-            $oldSymbol = $pastSourcesWithDependencies->reflect($apiClassName);
+            try {
+                $oldSymbol = $pastSourcesWithDependencies->reflect($apiClassName);
+            } catch(IdentifierNotFound $e) {
+                yield Change::skippedDueToFailure($e);
+                continue;
+            }

             yield from $this->examineSymbol($oldSymbol, $newSourcesWithDependencies);
         }
